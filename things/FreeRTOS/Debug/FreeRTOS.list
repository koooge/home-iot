
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000610c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800629c  0800629c  0001629c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800633c  0800633c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800633c  0800633c  0001633c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006344  08006344  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006344  08006344  00016344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006348  08006348  00016348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800634c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001638  20000010  0800635c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001648  0800635c  00021648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024226  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004300  00000000  00000000  00044266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f88  00000000  00000000  00048568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001de0  00000000  00000000  0004a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a09a  00000000  00000000  0004c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002186c  00000000  00000000  0007636a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001057cb  00000000  00000000  00097bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019d3a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008778  00000000  00000000  0019d3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006284 	.word	0x08006284

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006284 	.word	0x08006284

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	2000002c 	.word	0x2000002c
 80004f8:	20000080 	.word	0x20000080

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b08e      	sub	sp, #56	; 0x38
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 ff46 	bl	8001392 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f83f 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 fa49 	bl	80009a0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800050e:	f000 f8df 	bl	80006d0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000512:	f000 f915 	bl	8000740 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000516:	f000 f951 	bl	80007bc <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800051a:	f000 f975 	bl	8000808 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800051e:	f000 f9b1 	bl	8000884 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000522:	f000 f9df 	bl	80008e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000526:	f000 fa0d 	bl	8000944 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <main+0x7c>)
 800052c:	f107 041c 	add.w	r4, r7, #28
 8000530:	461d      	mov	r5, r3
 8000532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000536:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800053a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800053e:	f107 031c 	add.w	r3, r7, #28
 8000542:	2100      	movs	r1, #0
 8000544:	4618      	mov	r0, r3
 8000546:	f004 fc42 	bl	8004dce <osThreadCreate>
 800054a:	4603      	mov	r3, r0
 800054c:	4a0b      	ldr	r2, [pc, #44]	; (800057c <main+0x80>)
 800054e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <main+0x84>)
 8000552:	463c      	mov	r4, r7
 8000554:	461d      	mov	r5, r3
 8000556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000562:	463b      	mov	r3, r7
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f004 fc31 	bl	8004dce <osThreadCreate>
 800056c:	4603      	mov	r3, r0
 800056e:	4a05      	ldr	r2, [pc, #20]	; (8000584 <main+0x88>)
 8000570:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000572:	f004 fc25 	bl	8004dc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000576:	e7fe      	b.n	8000576 <main+0x7a>
 8000578:	080062b4 	.word	0x080062b4
 800057c:	20000fec 	.word	0x20000fec
 8000580:	080062d0 	.word	0x080062d0
 8000584:	200015b0 	.word	0x200015b0

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b0b8      	sub	sp, #224	; 0xe0
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000592:	2244      	movs	r2, #68	; 0x44
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f005 fe6c 	bl	8006274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ac:	463b      	mov	r3, r7
 80005ae:	2288      	movs	r2, #136	; 0x88
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 fe5e 	bl	8006274 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b8:	f001 fda4 	bl	8002104 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005bc:	4b42      	ldr	r3, [pc, #264]	; (80006c8 <SystemClock_Config+0x140>)
 80005be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005c2:	4a41      	ldr	r2, [pc, #260]	; (80006c8 <SystemClock_Config+0x140>)
 80005c4:	f023 0318 	bic.w	r3, r3, #24
 80005c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005cc:	2314      	movs	r3, #20
 80005ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005d2:	2301      	movs	r3, #1
 80005d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005e4:	2360      	movs	r3, #96	; 0x60
 80005e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005f0:	2301      	movs	r3, #1
 80005f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005fc:	2328      	movs	r3, #40	; 0x28
 80005fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000602:	2307      	movs	r3, #7
 8000604:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000618:	4618      	mov	r0, r3
 800061a:	f001 feb3 	bl	8002384 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000624:	f000 fb96 	bl	8000d54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2303      	movs	r3, #3
 8000630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000646:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800064a:	2104      	movs	r1, #4
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fa7f 	bl	8002b50 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000658:	f000 fb7c 	bl	8000d54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <SystemClock_Config+0x144>)
 800065e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000660:	2300      	movs	r3, #0
 8000662:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000664:	2300      	movs	r3, #0
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000668:	2300      	movs	r3, #0
 800066a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800066c:	2300      	movs	r3, #0
 800066e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000672:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000676:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000678:	2301      	movs	r3, #1
 800067a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800067c:	2301      	movs	r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000680:	2318      	movs	r3, #24
 8000682:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000684:	2307      	movs	r3, #7
 8000686:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000690:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000694:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000696:	463b      	mov	r3, r7
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fc91 	bl	8002fc0 <HAL_RCCEx_PeriphCLKConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80006a4:	f000 fb56 	bl	8000d54 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ac:	f001 fd48 	bl	8002140 <HAL_PWREx_ControlVoltageScaling>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x132>
  {
    Error_Handler();
 80006b6:	f000 fb4d 	bl	8000d54 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006ba:	f002 ff6b 	bl	8003594 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006be:	bf00      	nop
 80006c0:	37e0      	adds	r7, #224	; 0xe0
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	00012085 	.word	0x00012085

080006d0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006d4:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_DFSDM1_Init+0x68>)
 80006d6:	4a19      	ldr	r2, [pc, #100]	; (800073c <MX_DFSDM1_Init+0x6c>)
 80006d8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_DFSDM1_Init+0x68>)
 80006dc:	2201      	movs	r2, #1
 80006de:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_DFSDM1_Init+0x68>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_DFSDM1_Init+0x68>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_DFSDM1_Init+0x68>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_DFSDM1_Init+0x68>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_DFSDM1_Init+0x68>)
 80006fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006fe:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_DFSDM1_Init+0x68>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_DFSDM1_Init+0x68>)
 8000708:	2204      	movs	r2, #4
 800070a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_DFSDM1_Init+0x68>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_DFSDM1_Init+0x68>)
 8000714:	2201      	movs	r2, #1
 8000716:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_DFSDM1_Init+0x68>)
 800071a:	2200      	movs	r2, #0
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_DFSDM1_Init+0x68>)
 8000720:	2200      	movs	r2, #0
 8000722:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_DFSDM1_Init+0x68>)
 8000726:	f000 ff73 	bl	8001610 <HAL_DFSDM_ChannelInit>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000730:	f000 fb10 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000fb4 	.word	0x20000fb4
 800073c:	40016020 	.word	0x40016020

08000740 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_I2C2_Init+0x74>)
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <MX_I2C2_Init+0x78>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_I2C2_Init+0x74>)
 800074c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000750:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_I2C2_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_I2C2_Init+0x74>)
 800075a:	2201      	movs	r2, #1
 800075c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_I2C2_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_I2C2_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_I2C2_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000770:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_I2C2_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_I2C2_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_I2C2_Init+0x74>)
 800077e:	f001 fa52 	bl	8001c26 <HAL_I2C_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 fae4 	bl	8000d54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800078c:	2100      	movs	r1, #0
 800078e:	4809      	ldr	r0, [pc, #36]	; (80007b4 <MX_I2C2_Init+0x74>)
 8000790:	f001 fad8 	bl	8001d44 <HAL_I2CEx_ConfigAnalogFilter>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800079a:	f000 fadb 	bl	8000d54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800079e:	2100      	movs	r1, #0
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_I2C2_Init+0x74>)
 80007a2:	f001 fb1a 	bl	8001dda <HAL_I2CEx_ConfigDigitalFilter>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80007ac:	f000 fad2 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000147c 	.word	0x2000147c
 80007b8:	40005800 	.word	0x40005800

080007bc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_QUADSPI_Init+0x44>)
 80007c2:	4a10      	ldr	r2, [pc, #64]	; (8000804 <MX_QUADSPI_Init+0x48>)
 80007c4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_QUADSPI_Init+0x44>)
 80007c8:	2202      	movs	r2, #2
 80007ca:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_QUADSPI_Init+0x44>)
 80007ce:	2204      	movs	r2, #4
 80007d0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_QUADSPI_Init+0x44>)
 80007d4:	2210      	movs	r2, #16
 80007d6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_QUADSPI_Init+0x44>)
 80007da:	2217      	movs	r2, #23
 80007dc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_QUADSPI_Init+0x44>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_QUADSPI_Init+0x44>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_QUADSPI_Init+0x44>)
 80007ec:	f001 fd0e 	bl	800220c <HAL_QSPI_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007f6:	f000 faad 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200015b4 	.word	0x200015b4
 8000804:	a0001000 	.word	0xa0001000

08000808 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_SPI3_Init+0x74>)
 800080e:	4a1c      	ldr	r2, [pc, #112]	; (8000880 <MX_SPI3_Init+0x78>)
 8000810:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_SPI3_Init+0x74>)
 8000814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000818:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_SPI3_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_SPI3_Init+0x74>)
 8000822:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000826:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_SPI3_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_SPI3_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_SPI3_Init+0x74>)
 8000836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800083a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_SPI3_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_SPI3_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_SPI3_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_SPI3_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_SPI3_Init+0x74>)
 8000856:	2207      	movs	r2, #7
 8000858:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_SPI3_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_SPI3_Init+0x74>)
 8000862:	2208      	movs	r2, #8
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_SPI3_Init+0x74>)
 8000868:	f003 f876 	bl	8003958 <HAL_SPI_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000872:	f000 fa6f 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200014c8 	.word	0x200014c8
 8000880:	40003c00 	.word	0x40003c00

08000884 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USART1_UART_Init+0x58>)
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <MX_USART1_UART_Init+0x5c>)
 800088c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_USART1_UART_Init+0x58>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART1_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_USART1_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008c8:	f003 fbba 	bl	8004040 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 fa3f 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000152c 	.word	0x2000152c
 80008e0:	40013800 	.word	0x40013800

080008e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_USART3_UART_Init+0x58>)
 80008ea:	4a15      	ldr	r2, [pc, #84]	; (8000940 <MX_USART3_UART_Init+0x5c>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_USART3_UART_Init+0x58>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART3_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_USART3_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART3_UART_Init+0x58>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART3_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000928:	f003 fb8a 	bl	8004040 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000932:	f000 fa0f 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000ff0 	.word	0x20000ff0
 8000940:	40004800 	.word	0x40004800

08000944 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800094e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2206      	movs	r2, #6
 8000954:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	2202      	movs	r2, #2
 800095a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2202      	movs	r2, #2
 8000960:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000988:	f001 fa73 	bl	8001e72 <HAL_PCD_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000992:	f000 f9df 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20001074 	.word	0x20001074

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b6:	4bba      	ldr	r3, [pc, #744]	; (8000ca0 <MX_GPIO_Init+0x300>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4ab9      	ldr	r2, [pc, #740]	; (8000ca0 <MX_GPIO_Init+0x300>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4bb7      	ldr	r3, [pc, #732]	; (8000ca0 <MX_GPIO_Init+0x300>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	4bb4      	ldr	r3, [pc, #720]	; (8000ca0 <MX_GPIO_Init+0x300>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4ab3      	ldr	r2, [pc, #716]	; (8000ca0 <MX_GPIO_Init+0x300>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4bb1      	ldr	r3, [pc, #708]	; (8000ca0 <MX_GPIO_Init+0x300>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4bae      	ldr	r3, [pc, #696]	; (8000ca0 <MX_GPIO_Init+0x300>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4aad      	ldr	r2, [pc, #692]	; (8000ca0 <MX_GPIO_Init+0x300>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4bab      	ldr	r3, [pc, #684]	; (8000ca0 <MX_GPIO_Init+0x300>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4ba8      	ldr	r3, [pc, #672]	; (8000ca0 <MX_GPIO_Init+0x300>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4aa7      	ldr	r2, [pc, #668]	; (8000ca0 <MX_GPIO_Init+0x300>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4ba5      	ldr	r3, [pc, #660]	; (8000ca0 <MX_GPIO_Init+0x300>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a16:	4ba2      	ldr	r3, [pc, #648]	; (8000ca0 <MX_GPIO_Init+0x300>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4aa1      	ldr	r2, [pc, #644]	; (8000ca0 <MX_GPIO_Init+0x300>)
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b9f      	ldr	r3, [pc, #636]	; (8000ca0 <MX_GPIO_Init+0x300>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000a34:	489b      	ldr	r0, [pc, #620]	; (8000ca4 <MX_GPIO_Init+0x304>)
 8000a36:	f001 f8a1 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f248 1104 	movw	r1, #33028	; 0x8104
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a44:	f001 f89a 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000a4e:	4896      	ldr	r0, [pc, #600]	; (8000ca8 <MX_GPIO_Init+0x308>)
 8000a50:	f001 f894 	bl	8001b7c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f241 0181 	movw	r1, #4225	; 0x1081
 8000a5a:	4894      	ldr	r0, [pc, #592]	; (8000cac <MX_GPIO_Init+0x30c>)
 8000a5c:	f001 f88e 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a66:	4891      	ldr	r0, [pc, #580]	; (8000cac <MX_GPIO_Init+0x30c>)
 8000a68:	f001 f888 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a72:	488f      	ldr	r0, [pc, #572]	; (8000cb0 <MX_GPIO_Init+0x310>)
 8000a74:	f001 f882 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	488a      	ldr	r0, [pc, #552]	; (8000ca8 <MX_GPIO_Init+0x308>)
 8000a7e:	f001 f87d 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	2101      	movs	r1, #1
 8000a86:	4887      	ldr	r0, [pc, #540]	; (8000ca4 <MX_GPIO_Init+0x304>)
 8000a88:	f001 f878 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a8c:	f240 1315 	movw	r3, #277	; 0x115
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	487f      	ldr	r0, [pc, #508]	; (8000ca4 <MX_GPIO_Init+0x304>)
 8000aa6:	f000 febf 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000aaa:	236a      	movs	r3, #106	; 0x6a
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aae:	4b81      	ldr	r3, [pc, #516]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4879      	ldr	r0, [pc, #484]	; (8000ca4 <MX_GPIO_Init+0x304>)
 8000abe:	f000 feb3 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac8:	4b7b      	ldr	r3, [pc, #492]	; (8000cb8 <MX_GPIO_Init+0x318>)
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4876      	ldr	r0, [pc, #472]	; (8000cb0 <MX_GPIO_Init+0x310>)
 8000ad8:	f000 fea6 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000adc:	233f      	movs	r3, #63	; 0x3f
 8000ade:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ae0:	230b      	movs	r3, #11
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	4870      	ldr	r0, [pc, #448]	; (8000cb0 <MX_GPIO_Init+0x310>)
 8000af0:	f000 fe9a 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000af4:	2303      	movs	r3, #3
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b04:	2308      	movs	r3, #8
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b12:	f000 fe89 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b16:	f248 1304 	movw	r3, #33028	; 0x8104
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b32:	f000 fe79 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b36:	2308      	movs	r3, #8
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b46:	2301      	movs	r3, #1
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b54:	f000 fe68 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b58:	2310      	movs	r3, #16
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b5c:	230b      	movs	r3, #11
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6e:	f000 fe5b 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000b72:	23e0      	movs	r3, #224	; 0xe0
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b82:	2305      	movs	r3, #5
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b90:	f000 fe4a 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b94:	2301      	movs	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b98:	4b46      	ldr	r3, [pc, #280]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4840      	ldr	r0, [pc, #256]	; (8000ca8 <MX_GPIO_Init+0x308>)
 8000ba8:	f000 fe3e 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000bac:	2302      	movs	r3, #2
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bb0:	230b      	movs	r3, #11
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	483a      	ldr	r0, [pc, #232]	; (8000ca8 <MX_GPIO_Init+0x308>)
 8000bc0:	f000 fe32 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000bc4:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000bc8:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4832      	ldr	r0, [pc, #200]	; (8000ca8 <MX_GPIO_Init+0x308>)
 8000bde:	f000 fe23 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000be2:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000be6:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be8:	4b32      	ldr	r3, [pc, #200]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	482d      	ldr	r0, [pc, #180]	; (8000cac <MX_GPIO_Init+0x30c>)
 8000bf8:	f000 fe16 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000bfc:	f243 0381 	movw	r3, #12417	; 0x3081
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4825      	ldr	r0, [pc, #148]	; (8000cac <MX_GPIO_Init+0x30c>)
 8000c16:	f000 fe07 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c1a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	481f      	ldr	r0, [pc, #124]	; (8000cb0 <MX_GPIO_Init+0x310>)
 8000c34:	f000 fdf8 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c38:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4818      	ldr	r0, [pc, #96]	; (8000cb0 <MX_GPIO_Init+0x310>)
 8000c4e:	f000 fdeb 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c52:	2302      	movs	r3, #2
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c62:	2305      	movs	r3, #5
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480f      	ldr	r0, [pc, #60]	; (8000cac <MX_GPIO_Init+0x30c>)
 8000c6e:	f000 fddb 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c72:	2378      	movs	r3, #120	; 0x78
 8000c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c82:	2307      	movs	r3, #7
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4807      	ldr	r0, [pc, #28]	; (8000cac <MX_GPIO_Init+0x30c>)
 8000c8e:	f000 fdcb 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c98:	2312      	movs	r3, #18
 8000c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e00d      	b.n	8000cbc <MX_GPIO_Init+0x31c>
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	48001000 	.word	0x48001000
 8000ca8:	48000400 	.word	0x48000400
 8000cac:	48000c00 	.word	0x48000c00
 8000cb0:	48000800 	.word	0x48000800
 8000cb4:	10110000 	.word	0x10110000
 8000cb8:	10210000 	.word	0x10210000
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480b      	ldr	r0, [pc, #44]	; (8000cfc <MX_GPIO_Init+0x35c>)
 8000cce:	f000 fdab 	bl	8001828 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	2017      	movs	r0, #23
 8000cd8:	f000 fc70 	bl	80015bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cdc:	2017      	movs	r0, #23
 8000cde:	f000 fc89 	bl	80015f4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2105      	movs	r1, #5
 8000ce6:	2028      	movs	r0, #40	; 0x28
 8000ce8:	f000 fc68 	bl	80015bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cec:	2028      	movs	r0, #40	; 0x28
 8000cee:	f000 fc81 	bl	80015f4 <HAL_NVIC_EnableIRQ>

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	48000400 	.word	0x48000400

08000d00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f004 f8ac 	bl	8004e66 <osDelay>
 8000d0e:	e7fb      	b.n	8000d08 <StartDefaultTask+0x8>

08000d10 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000d18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <StartTask02+0x1c>)
 8000d1e:	f000 ff45 	bl	8001bac <HAL_GPIO_TogglePin>
	osDelay(500);
 8000d22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d26:	f004 f89e 	bl	8004e66 <osDelay>
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000d2a:	e7f5      	b.n	8000d18 <StartTask02+0x8>
 8000d2c:	48000400 	.word	0x48000400

08000d30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d101      	bne.n	8000d46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d42:	f000 fb3f 	bl	80013c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40014800 	.word	0x40014800

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
}
 8000d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <Error_Handler+0x8>
	...

08000d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_MspInit+0x4c>)
 8000d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <HAL_MspInit+0x4c>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6613      	str	r3, [r2, #96]	; 0x60
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_MspInit+0x4c>)
 8000d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_MspInit+0x4c>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_MspInit+0x4c>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	6593      	str	r3, [r2, #88]	; 0x58
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_MspInit+0x4c>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	210f      	movs	r1, #15
 8000d9a:	f06f 0001 	mvn.w	r0, #1
 8000d9e:	f000 fc0d 	bl	80015bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d12d      	bne.n	8000e2c <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd4:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dda:	6613      	str	r3, [r2, #96]	; 0x60
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dec:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000dee:	f043 0310 	orr.w	r3, r3, #16
 8000df2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000e00:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e12:	2306      	movs	r3, #6
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4807      	ldr	r0, [pc, #28]	; (8000e3c <HAL_DFSDM_ChannelMspInit+0x8c>)
 8000e1e:	f000 fd03 	bl	8001828 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	3301      	adds	r3, #1
 8000e28:	4a02      	ldr	r2, [pc, #8]	; (8000e34 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000e2a:	6013      	str	r3, [r2, #0]
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000280 	.word	0x20000280
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48001000 	.word	0x48001000

08000e40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <HAL_I2C_MspInit+0x7c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d128      	bne.n	8000eb4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_I2C_MspInit+0x80>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <HAL_I2C_MspInit+0x80>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_I2C_MspInit+0x80>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e80:	2312      	movs	r3, #18
 8000e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <HAL_I2C_MspInit+0x84>)
 8000e98:	f000 fcc6 	bl	8001828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_I2C_MspInit+0x80>)
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_I2C_MspInit+0x80>)
 8000ea2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_I2C_MspInit+0x80>)
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40005800 	.word	0x40005800
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000400 	.word	0x48000400

08000ec8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <HAL_QSPI_MspInit+0x7c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d128      	bne.n	8000f3c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <HAL_QSPI_MspInit+0x80>)
 8000eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000eee:	4a16      	ldr	r2, [pc, #88]	; (8000f48 <HAL_QSPI_MspInit+0x80>)
 8000ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef4:	6513      	str	r3, [r2, #80]	; 0x50
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <HAL_QSPI_MspInit+0x80>)
 8000ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_QSPI_MspInit+0x80>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <HAL_QSPI_MspInit+0x80>)
 8000f08:	f043 0310 	orr.w	r3, r3, #16
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_QSPI_MspInit+0x80>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f1a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f1e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f2c:	230a      	movs	r3, #10
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <HAL_QSPI_MspInit+0x84>)
 8000f38:	f000 fc76 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	; 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	a0001000 	.word	0xa0001000
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	48001000 	.word	0x48001000

08000f50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <HAL_SPI_MspInit+0x7c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d128      	bne.n	8000fc4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_SPI_MspInit+0x80>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	4a16      	ldr	r2, [pc, #88]	; (8000fd0 <HAL_SPI_MspInit+0x80>)
 8000f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <HAL_SPI_MspInit+0x80>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <HAL_SPI_MspInit+0x80>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <HAL_SPI_MspInit+0x80>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_SPI_MspInit+0x80>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000fa2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fb4:	2306      	movs	r3, #6
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <HAL_SPI_MspInit+0x84>)
 8000fc0:	f000 fc32 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40003c00 	.word	0x40003c00
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	48000800 	.word	0x48000800

08000fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	; 0x30
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a2e      	ldr	r2, [pc, #184]	; (80010b0 <HAL_UART_MspInit+0xd8>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d128      	bne.n	800104c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ffa:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <HAL_UART_MspInit+0xdc>)
 8000ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffe:	4a2d      	ldr	r2, [pc, #180]	; (80010b4 <HAL_UART_MspInit+0xdc>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	6613      	str	r3, [r2, #96]	; 0x60
 8001006:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <HAL_UART_MspInit+0xdc>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100e:	61bb      	str	r3, [r7, #24]
 8001010:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <HAL_UART_MspInit+0xdc>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <HAL_UART_MspInit+0xdc>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101e:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <HAL_UART_MspInit+0xdc>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800102a:	23c0      	movs	r3, #192	; 0xc0
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800103a:	2307      	movs	r3, #7
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	4619      	mov	r1, r3
 8001044:	481c      	ldr	r0, [pc, #112]	; (80010b8 <HAL_UART_MspInit+0xe0>)
 8001046:	f000 fbef 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800104a:	e02d      	b.n	80010a8 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a1a      	ldr	r2, [pc, #104]	; (80010bc <HAL_UART_MspInit+0xe4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d128      	bne.n	80010a8 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_UART_MspInit+0xdc>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105a:	4a16      	ldr	r2, [pc, #88]	; (80010b4 <HAL_UART_MspInit+0xdc>)
 800105c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001060:	6593      	str	r3, [r2, #88]	; 0x58
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_UART_MspInit+0xdc>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_UART_MspInit+0xdc>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <HAL_UART_MspInit+0xdc>)
 8001074:	f043 0308 	orr.w	r3, r3, #8
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_UART_MspInit+0xdc>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001086:	f44f 7340 	mov.w	r3, #768	; 0x300
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001098:	2307      	movs	r3, #7
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <HAL_UART_MspInit+0xe8>)
 80010a4:	f000 fbc0 	bl	8001828 <HAL_GPIO_Init>
}
 80010a8:	bf00      	nop
 80010aa:	3730      	adds	r7, #48	; 0x30
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40013800 	.word	0x40013800
 80010b4:	40021000 	.word	0x40021000
 80010b8:	48000400 	.word	0x48000400
 80010bc:	40004800 	.word	0x40004800
 80010c0:	48000c00 	.word	0x48000c00

080010c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010e4:	d154      	bne.n	8001190 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <HAL_PCD_MspInit+0xd4>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a2b      	ldr	r2, [pc, #172]	; (8001198 <HAL_PCD_MspInit+0xd4>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b29      	ldr	r3, [pc, #164]	; (8001198 <HAL_PCD_MspInit+0xd4>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80010fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001116:	f000 fb87 	bl	8001828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800111a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800112c:	230a      	movs	r3, #10
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113a:	f000 fb75 	bl	8001828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_PCD_MspInit+0xd4>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a15      	ldr	r2, [pc, #84]	; (8001198 <HAL_PCD_MspInit+0xd4>)
 8001144:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_PCD_MspInit+0xd4>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_PCD_MspInit+0xd4>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d114      	bne.n	800118c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HAL_PCD_MspInit+0xd4>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <HAL_PCD_MspInit+0xd4>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	6593      	str	r3, [r2, #88]	; 0x58
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_PCD_MspInit+0xd4>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800117a:	f001 f837 	bl	80021ec <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_PCD_MspInit+0xd4>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <HAL_PCD_MspInit+0xd4>)
 8001184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001188:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800118a:	e001      	b.n	8001190 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 800118c:	f001 f82e 	bl	80021ec <HAL_PWREx_EnableVddUSB>
}
 8001190:	bf00      	nop
 8001192:	3728      	adds	r7, #40	; 0x28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021000 	.word	0x40021000

0800119c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	; 0x30
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	201a      	movs	r0, #26
 80011b2:	f000 fa03 	bl	80015bc <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80011b6:	201a      	movs	r0, #26
 80011b8:	f000 fa1c 	bl	80015f4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80011bc:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <HAL_InitTick+0x9c>)
 80011be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c0:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_InitTick+0x9c>)
 80011c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c6:	6613      	str	r3, [r2, #96]	; 0x60
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_InitTick+0x9c>)
 80011ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011d4:	f107 0210 	add.w	r2, r7, #16
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 fe5c 	bl	8002e9c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011e4:	f001 fe44 	bl	8002e70 <HAL_RCC_GetPCLK2Freq>
 80011e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ec:	4a13      	ldr	r2, [pc, #76]	; (800123c <HAL_InitTick+0xa0>)
 80011ee:	fba2 2303 	umull	r2, r3, r2, r3
 80011f2:	0c9b      	lsrs	r3, r3, #18
 80011f4:	3b01      	subs	r3, #1
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_InitTick+0xa4>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <HAL_InitTick+0xa8>)
 80011fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <HAL_InitTick+0xa4>)
 8001200:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001204:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_InitTick+0xa4>)
 8001208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120a:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_InitTick+0xa4>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_InitTick+0xa4>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <HAL_InitTick+0xa4>)
 800121a:	f002 fc40 	bl	8003a9e <HAL_TIM_Base_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d104      	bne.n	800122e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001224:	4806      	ldr	r0, [pc, #24]	; (8001240 <HAL_InitTick+0xa4>)
 8001226:	f002 fc9b 	bl	8003b60 <HAL_TIM_Base_Start_IT>
 800122a:	4603      	mov	r3, r0
 800122c:	e000      	b.n	8001230 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3730      	adds	r7, #48	; 0x30
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40021000 	.word	0x40021000
 800123c:	431bde83 	.word	0x431bde83
 8001240:	200015f8 	.word	0x200015f8
 8001244:	40014800 	.word	0x40014800

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001278:	2020      	movs	r0, #32
 800127a:	f000 fcb1 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800127e:	2040      	movs	r0, #64	; 0x40
 8001280:	f000 fcae 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001284:	2080      	movs	r0, #128	; 0x80
 8001286:	f000 fcab 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800128a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800128e:	f000 fca7 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800129e:	f002 fccf 	bl	8003c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200015f8 	.word	0x200015f8

080012ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80012b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012b4:	f000 fc94 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80012b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012bc:	f000 fc90 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012c4:	f000 fc8c 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80012c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012cc:	f000 fc88 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80012d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012d4:	f000 fc84 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}

080012dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <SystemInit+0x5c>)
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e6:	4a14      	ldr	r2, [pc, #80]	; (8001338 <SystemInit+0x5c>)
 80012e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <SystemInit+0x60>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a11      	ldr	r2, [pc, #68]	; (800133c <SystemInit+0x60>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <SystemInit+0x60>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <SystemInit+0x60>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a0d      	ldr	r2, [pc, #52]	; (800133c <SystemInit+0x60>)
 8001308:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800130c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001310:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <SystemInit+0x60>)
 8001314:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001318:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <SystemInit+0x60>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a07      	ldr	r2, [pc, #28]	; (800133c <SystemInit+0x60>)
 8001320:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001324:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <SystemInit+0x60>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00
 800133c:	40021000 	.word	0x40021000

08001340 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001378 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001344:	f7ff ffca 	bl	80012dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001348:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800134a:	e003      	b.n	8001354 <LoopCopyDataInit>

0800134c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800134e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001350:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001352:	3104      	adds	r1, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001354:	480a      	ldr	r0, [pc, #40]	; (8001380 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001358:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800135a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800135c:	d3f6      	bcc.n	800134c <CopyDataInit>
	ldr	r2, =_sbss
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001360:	e002      	b.n	8001368 <LoopFillZerobss>

08001362 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001362:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001364:	f842 3b04 	str.w	r3, [r2], #4

08001368 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <LoopForever+0x16>)
	cmp	r2, r3
 800136a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800136c:	d3f9      	bcc.n	8001362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136e:	f004 ff5d 	bl	800622c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001372:	f7ff f8c3 	bl	80004fc <main>

08001376 <LoopForever>:

LoopForever:
    b LoopForever
 8001376:	e7fe      	b.n	8001376 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001378:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800137c:	0800634c 	.word	0x0800634c
	ldr	r0, =_sdata
 8001380:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001384:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001388:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 800138c:	20001648 	.word	0x20001648

08001390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>

08001392 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139c:	2003      	movs	r0, #3
 800139e:	f000 f902 	bl	80015a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff fefa 	bl	800119c <HAL_InitTick>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	e001      	b.n	80013b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013b4:	f7ff fcd4 	bl	8000d60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008
 80013e8:	20001644 	.word	0x20001644

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20001644 	.word	0x20001644

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff ffee 	bl	80013ec <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_Delay+0x44>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800142a:	bf00      	nop
 800142c:	f7ff ffde 	bl	80013ec <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
  {
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db0b      	blt.n	80014da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	f003 021f 	and.w	r2, r3, #31
 80014c8:	4907      	ldr	r1, [pc, #28]	; (80014e8 <__NVIC_EnableIRQ+0x38>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	095b      	lsrs	r3, r3, #5
 80014d0:	2001      	movs	r0, #1
 80014d2:	fa00 f202 	lsl.w	r2, r0, r2
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ff4c 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015ce:	f7ff ff61 	bl	8001494 <__NVIC_GetPriorityGrouping>
 80015d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	6978      	ldr	r0, [r7, #20]
 80015da:	f7ff ffb1 	bl	8001540 <NVIC_EncodePriority>
 80015de:	4602      	mov	r2, r0
 80015e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff80 	bl	80014ec <__NVIC_SetPriority>
}
 80015ec:	bf00      	nop
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff54 	bl	80014b0 <__NVIC_EnableIRQ>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0ac      	b.n	800177c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f8b2 	bl	8001790 <DFSDM_GetChannelFromInstance>
 800162c:	4603      	mov	r3, r0
 800162e:	4a55      	ldr	r2, [pc, #340]	; (8001784 <HAL_DFSDM_ChannelInit+0x174>)
 8001630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e09f      	b.n	800177c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff fbb7 	bl	8000db0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001642:	4b51      	ldr	r3, [pc, #324]	; (8001788 <HAL_DFSDM_ChannelInit+0x178>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	4a4f      	ldr	r2, [pc, #316]	; (8001788 <HAL_DFSDM_ChannelInit+0x178>)
 800164a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800164c:	4b4e      	ldr	r3, [pc, #312]	; (8001788 <HAL_DFSDM_ChannelInit+0x178>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d125      	bne.n	80016a0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001654:	4b4d      	ldr	r3, [pc, #308]	; (800178c <HAL_DFSDM_ChannelInit+0x17c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a4c      	ldr	r2, [pc, #304]	; (800178c <HAL_DFSDM_ChannelInit+0x17c>)
 800165a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800165e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001660:	4b4a      	ldr	r3, [pc, #296]	; (800178c <HAL_DFSDM_ChannelInit+0x17c>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	4948      	ldr	r1, [pc, #288]	; (800178c <HAL_DFSDM_ChannelInit+0x17c>)
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800166e:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_DFSDM_ChannelInit+0x17c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a46      	ldr	r2, [pc, #280]	; (800178c <HAL_DFSDM_ChannelInit+0x17c>)
 8001674:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001678:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	791b      	ldrb	r3, [r3, #4]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d108      	bne.n	8001694 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001682:	4b42      	ldr	r3, [pc, #264]	; (800178c <HAL_DFSDM_ChannelInit+0x17c>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	3b01      	subs	r3, #1
 800168c:	041b      	lsls	r3, r3, #16
 800168e:	493f      	ldr	r1, [pc, #252]	; (800178c <HAL_DFSDM_ChannelInit+0x17c>)
 8001690:	4313      	orrs	r3, r2
 8001692:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001694:	4b3d      	ldr	r3, [pc, #244]	; (800178c <HAL_DFSDM_ChannelInit+0x17c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a3c      	ldr	r2, [pc, #240]	; (800178c <HAL_DFSDM_ChannelInit+0x17c>)
 800169a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800169e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80016ae:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6819      	ldr	r1, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016be:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80016c4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 020f 	bic.w	r2, r2, #15
 80016dc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6819      	ldr	r1, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001704:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6899      	ldr	r1, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	3b01      	subs	r3, #1
 8001716:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f002 0207 	and.w	r2, r2, #7
 8001730:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6859      	ldr	r1, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800175c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f810 	bl	8001790 <DFSDM_GetChannelFromInstance>
 8001770:	4602      	mov	r2, r0
 8001772:	4904      	ldr	r1, [pc, #16]	; (8001784 <HAL_DFSDM_ChannelInit+0x174>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000288 	.word	0x20000288
 8001788:	20000284 	.word	0x20000284
 800178c:	40016000 	.word	0x40016000

08001790 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a1c      	ldr	r2, [pc, #112]	; (800180c <DFSDM_GetChannelFromInstance+0x7c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d102      	bne.n	80017a6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	e02b      	b.n	80017fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a19      	ldr	r2, [pc, #100]	; (8001810 <DFSDM_GetChannelFromInstance+0x80>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d102      	bne.n	80017b4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	e024      	b.n	80017fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a17      	ldr	r2, [pc, #92]	; (8001814 <DFSDM_GetChannelFromInstance+0x84>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d102      	bne.n	80017c2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80017bc:	2302      	movs	r3, #2
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	e01d      	b.n	80017fe <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a14      	ldr	r2, [pc, #80]	; (8001818 <DFSDM_GetChannelFromInstance+0x88>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d102      	bne.n	80017d0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80017ca:	2304      	movs	r3, #4
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	e016      	b.n	80017fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <DFSDM_GetChannelFromInstance+0x8c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d102      	bne.n	80017de <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80017d8:	2305      	movs	r3, #5
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	e00f      	b.n	80017fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <DFSDM_GetChannelFromInstance+0x90>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d102      	bne.n	80017ec <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80017e6:	2306      	movs	r3, #6
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e008      	b.n	80017fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <DFSDM_GetChannelFromInstance+0x94>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d102      	bne.n	80017fa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80017f4:	2307      	movs	r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e001      	b.n	80017fe <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80017fa:	2303      	movs	r3, #3
 80017fc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40016000 	.word	0x40016000
 8001810:	40016020 	.word	0x40016020
 8001814:	40016040 	.word	0x40016040
 8001818:	40016080 	.word	0x40016080
 800181c:	400160a0 	.word	0x400160a0
 8001820:	400160c0 	.word	0x400160c0
 8001824:	400160e0 	.word	0x400160e0

08001828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001836:	e17f      	b.n	8001b38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2101      	movs	r1, #1
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	4013      	ands	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 8171 	beq.w	8001b32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d00b      	beq.n	8001870 <HAL_GPIO_Init+0x48>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d007      	beq.n	8001870 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001864:	2b11      	cmp	r3, #17
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b12      	cmp	r3, #18
 800186e:	d130      	bne.n	80018d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018a6:	2201      	movs	r2, #1
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	f003 0201 	and.w	r2, r3, #1
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d118      	bne.n	8001910 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018e4:	2201      	movs	r2, #1
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	08db      	lsrs	r3, r3, #3
 80018fa:	f003 0201 	and.w	r2, r3, #1
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	2203      	movs	r2, #3
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x128>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b12      	cmp	r3, #18
 800194e:	d123      	bne.n	8001998 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	08da      	lsrs	r2, r3, #3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3208      	adds	r2, #8
 8001958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	08da      	lsrs	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3208      	adds	r2, #8
 8001992:	6939      	ldr	r1, [r7, #16]
 8001994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0203 	and.w	r2, r3, #3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80ac 	beq.w	8001b32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	4b5f      	ldr	r3, [pc, #380]	; (8001b58 <HAL_GPIO_Init+0x330>)
 80019dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019de:	4a5e      	ldr	r2, [pc, #376]	; (8001b58 <HAL_GPIO_Init+0x330>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6613      	str	r3, [r2, #96]	; 0x60
 80019e6:	4b5c      	ldr	r3, [pc, #368]	; (8001b58 <HAL_GPIO_Init+0x330>)
 80019e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019f2:	4a5a      	ldr	r2, [pc, #360]	; (8001b5c <HAL_GPIO_Init+0x334>)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	220f      	movs	r2, #15
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a1c:	d025      	beq.n	8001a6a <HAL_GPIO_Init+0x242>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4f      	ldr	r2, [pc, #316]	; (8001b60 <HAL_GPIO_Init+0x338>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d01f      	beq.n	8001a66 <HAL_GPIO_Init+0x23e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4e      	ldr	r2, [pc, #312]	; (8001b64 <HAL_GPIO_Init+0x33c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d019      	beq.n	8001a62 <HAL_GPIO_Init+0x23a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4d      	ldr	r2, [pc, #308]	; (8001b68 <HAL_GPIO_Init+0x340>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_GPIO_Init+0x236>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4c      	ldr	r2, [pc, #304]	; (8001b6c <HAL_GPIO_Init+0x344>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d00d      	beq.n	8001a5a <HAL_GPIO_Init+0x232>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4b      	ldr	r2, [pc, #300]	; (8001b70 <HAL_GPIO_Init+0x348>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d007      	beq.n	8001a56 <HAL_GPIO_Init+0x22e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4a      	ldr	r2, [pc, #296]	; (8001b74 <HAL_GPIO_Init+0x34c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_GPIO_Init+0x22a>
 8001a4e:	2306      	movs	r3, #6
 8001a50:	e00c      	b.n	8001a6c <HAL_GPIO_Init+0x244>
 8001a52:	2307      	movs	r3, #7
 8001a54:	e00a      	b.n	8001a6c <HAL_GPIO_Init+0x244>
 8001a56:	2305      	movs	r3, #5
 8001a58:	e008      	b.n	8001a6c <HAL_GPIO_Init+0x244>
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x244>
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e004      	b.n	8001a6c <HAL_GPIO_Init+0x244>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e002      	b.n	8001a6c <HAL_GPIO_Init+0x244>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_Init+0x244>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	f002 0203 	and.w	r2, r2, #3
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	4093      	lsls	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a7c:	4937      	ldr	r1, [pc, #220]	; (8001b5c <HAL_GPIO_Init+0x334>)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	3302      	adds	r3, #2
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <HAL_GPIO_Init+0x350>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aae:	4a32      	ldr	r2, [pc, #200]	; (8001b78 <HAL_GPIO_Init+0x350>)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <HAL_GPIO_Init+0x350>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ad8:	4a27      	ldr	r2, [pc, #156]	; (8001b78 <HAL_GPIO_Init+0x350>)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <HAL_GPIO_Init+0x350>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b02:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <HAL_GPIO_Init+0x350>)
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_GPIO_Init+0x350>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b2c:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <HAL_GPIO_Init+0x350>)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f47f ae78 	bne.w	8001838 <HAL_GPIO_Init+0x10>
  }
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	371c      	adds	r7, #28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40010000 	.word	0x40010000
 8001b60:	48000400 	.word	0x48000400
 8001b64:	48000800 	.word	0x48000800
 8001b68:	48000c00 	.word	0x48000c00
 8001b6c:	48001000 	.word	0x48001000
 8001b70:	48001400 	.word	0x48001400
 8001b74:	48001800 	.word	0x48001800
 8001b78:	40010400 	.word	0x40010400

08001b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b8c:	787b      	ldrb	r3, [r7, #1]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b98:	e002      	b.n	8001ba0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	041a      	lsls	r2, r3, #16
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	43d9      	mvns	r1, r3
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	400b      	ands	r3, r1
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	619a      	str	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d006      	beq.n	8001c04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f806 	bl	8001c10 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40010400 	.word	0x40010400

08001c10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e081      	b.n	8001d3c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d106      	bne.n	8001c52 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff f8f7 	bl	8000e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2224      	movs	r2, #36	; 0x24
 8001c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0201 	bic.w	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d107      	bne.n	8001ca0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	e006      	b.n	8001cae <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d104      	bne.n	8001cc0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cbe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ce2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	ea42 0103 	orr.w	r1, r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	021a      	lsls	r2, r3, #8
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69d9      	ldr	r1, [r3, #28]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a1a      	ldr	r2, [r3, #32]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0201 	orr.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b20      	cmp	r3, #32
 8001d58:	d138      	bne.n	8001dcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e032      	b.n	8001dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2224      	movs	r2, #36	; 0x24
 8001d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6819      	ldr	r1, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e000      	b.n	8001dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001dcc:	2302      	movs	r3, #2
  }
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b085      	sub	sp, #20
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	d139      	bne.n	8001e64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e033      	b.n	8001e66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2224      	movs	r2, #36	; 0x24
 8001e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0201 	bic.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	021b      	lsls	r3, r3, #8
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e000      	b.n	8001e66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e64:	2302      	movs	r3, #2
  }
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e74:	b08f      	sub	sp, #60	; 0x3c
 8001e76:	af0a      	add	r7, sp, #40	; 0x28
 8001e78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e116      	b.n	80020b2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff f910 	bl	80010c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f002 fd27 	bl	8004916 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	687e      	ldr	r6, [r7, #4]
 8001ed0:	466d      	mov	r5, sp
 8001ed2:	f106 0410 	add.w	r4, r6, #16
 8001ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ede:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ee2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ee6:	1d33      	adds	r3, r6, #4
 8001ee8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eea:	6838      	ldr	r0, [r7, #0]
 8001eec:	f002 fce7 	bl	80048be <USB_CoreInit>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0d7      	b.n	80020b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 fd15 	bl	8004938 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e04a      	b.n	8001faa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	333d      	adds	r3, #61	; 0x3d
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	333c      	adds	r3, #60	; 0x3c
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	b298      	uxth	r0, r3
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	3342      	adds	r3, #66	; 0x42
 8001f50:	4602      	mov	r2, r0
 8001f52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	333f      	adds	r3, #63	; 0x3f
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	3344      	adds	r3, #68	; 0x44
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	3348      	adds	r3, #72	; 0x48
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3350      	adds	r3, #80	; 0x50
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d3af      	bcc.n	8001f14 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e044      	b.n	8002044 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	1a9b      	subs	r3, r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	1a9b      	subs	r3, r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	3301      	adds	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	d3b5      	bcc.n	8001fba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	687e      	ldr	r6, [r7, #4]
 8002056:	466d      	mov	r5, sp
 8002058:	f106 0410 	add.w	r4, r6, #16
 800205c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002064:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002068:	e885 0003 	stmia.w	r5, {r0, r1}
 800206c:	1d33      	adds	r3, r6, #4
 800206e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002070:	6838      	ldr	r0, [r7, #0]
 8002072:	f002 fc8b 	bl	800498c <USB_DevInit>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e014      	b.n	80020b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	2b01      	cmp	r3, #1
 800209e:	d102      	bne.n	80020a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f80a 	bl	80020ba <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f002 fe1b 	bl	8004ce6 <USB_DevDisconnect>

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020ba <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b085      	sub	sp, #20
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	f043 0303 	orr.w	r3, r3, #3
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a04      	ldr	r2, [pc, #16]	; (8002120 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800210e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002112:	6013      	str	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40007000 	.word	0x40007000

08002124 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <HAL_PWREx_GetVoltageRange+0x18>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40007000 	.word	0x40007000

08002140 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800214e:	d130      	bne.n	80021b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002150:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800215c:	d038      	beq.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002166:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002168:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2232      	movs	r2, #50	; 0x32
 8002174:	fb02 f303 	mul.w	r3, r2, r3
 8002178:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	0c9b      	lsrs	r3, r3, #18
 8002180:	3301      	adds	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002184:	e002      	b.n	800218c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3b01      	subs	r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002198:	d102      	bne.n	80021a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f2      	bne.n	8002186 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ac:	d110      	bne.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e00f      	b.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021be:	d007      	beq.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021c8:	4a05      	ldr	r2, [pc, #20]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40007000 	.word	0x40007000
 80021e4:	20000000 	.word	0x20000000
 80021e8:	431bde83 	.word	0x431bde83

080021ec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_PWREx_EnableVddUSB+0x1c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_PWREx_EnableVddUSB+0x1c>)
 80021f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021fa:	6053      	str	r3, [r2, #4]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40007000 	.word	0x40007000

0800220c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af02      	add	r7, sp, #8
 8002212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff f8ea 	bl	80013ec <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e063      	b.n	80022ec <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10b      	bne.n	8002248 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7fe fe45 	bl	8000ec8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800223e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f858 	bl	80022f8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	3b01      	subs	r3, #1
 8002258:	021a      	lsls	r2, r3, #8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	2120      	movs	r1, #32
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f850 	bl	8002314 <QSPI_WaitFlagStateUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002278:	7afb      	ldrb	r3, [r7, #11]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d131      	bne.n	80022e2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002288:	f023 0310 	bic.w	r3, r3, #16
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6852      	ldr	r2, [r2, #4]
 8002290:	0611      	lsls	r1, r2, #24
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68d2      	ldr	r2, [r2, #12]
 8002296:	4311      	orrs	r1, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	430b      	orrs	r3, r1
 800229e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <HAL_QSPI_Init+0xe8>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6912      	ldr	r2, [r2, #16]
 80022ae:	0411      	lsls	r1, r2, #16
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6952      	ldr	r2, [r2, #20]
 80022b4:	4311      	orrs	r1, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6992      	ldr	r2, [r2, #24]
 80022ba:	4311      	orrs	r1, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80022ea:	7afb      	ldrb	r3, [r7, #11]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	ffe0f8fe 	.word	0xffe0f8fe

080022f8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	4613      	mov	r3, r2
 8002322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002324:	e01a      	b.n	800235c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d016      	beq.n	800235c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232e:	f7ff f85d 	bl	80013ec <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	429a      	cmp	r2, r3
 800233c:	d302      	bcc.n	8002344 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10b      	bne.n	800235c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2204      	movs	r2, #4
 8002348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e00e      	b.n	800237a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	bf14      	ite	ne
 800236a:	2301      	movne	r3, #1
 800236c:	2300      	moveq	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	429a      	cmp	r2, r3
 8002376:	d1d6      	bne.n	8002326 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e3d4      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002396:	4ba1      	ldr	r3, [pc, #644]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a0:	4b9e      	ldr	r3, [pc, #632]	; (800261c <HAL_RCC_OscConfig+0x298>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80e4 	beq.w	8002580 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <HAL_RCC_OscConfig+0x4a>
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2b0c      	cmp	r3, #12
 80023c2:	f040 808b 	bne.w	80024dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	f040 8087 	bne.w	80024dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023ce:	4b93      	ldr	r3, [pc, #588]	; (800261c <HAL_RCC_OscConfig+0x298>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_RCC_OscConfig+0x62>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e3ac      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1a      	ldr	r2, [r3, #32]
 80023ea:	4b8c      	ldr	r3, [pc, #560]	; (800261c <HAL_RCC_OscConfig+0x298>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d004      	beq.n	8002400 <HAL_RCC_OscConfig+0x7c>
 80023f6:	4b89      	ldr	r3, [pc, #548]	; (800261c <HAL_RCC_OscConfig+0x298>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023fe:	e005      	b.n	800240c <HAL_RCC_OscConfig+0x88>
 8002400:	4b86      	ldr	r3, [pc, #536]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800240c:	4293      	cmp	r3, r2
 800240e:	d223      	bcs.n	8002458 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fd73 	bl	8002f00 <RCC_SetFlashLatencyFromMSIRange>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e38d      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002424:	4b7d      	ldr	r3, [pc, #500]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a7c      	ldr	r2, [pc, #496]	; (800261c <HAL_RCC_OscConfig+0x298>)
 800242a:	f043 0308 	orr.w	r3, r3, #8
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b7a      	ldr	r3, [pc, #488]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4977      	ldr	r1, [pc, #476]	; (800261c <HAL_RCC_OscConfig+0x298>)
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002442:	4b76      	ldr	r3, [pc, #472]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	4972      	ldr	r1, [pc, #456]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
 8002456:	e025      	b.n	80024a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002458:	4b70      	ldr	r3, [pc, #448]	; (800261c <HAL_RCC_OscConfig+0x298>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a6f      	ldr	r2, [pc, #444]	; (800261c <HAL_RCC_OscConfig+0x298>)
 800245e:	f043 0308 	orr.w	r3, r3, #8
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b6d      	ldr	r3, [pc, #436]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	496a      	ldr	r1, [pc, #424]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002476:	4b69      	ldr	r3, [pc, #420]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	4965      	ldr	r1, [pc, #404]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d109      	bne.n	80024a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fd33 	bl	8002f00 <RCC_SetFlashLatencyFromMSIRange>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e34d      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024a4:	f000 fc36 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b5c      	ldr	r3, [pc, #368]	; (800261c <HAL_RCC_OscConfig+0x298>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	091b      	lsrs	r3, r3, #4
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	495a      	ldr	r1, [pc, #360]	; (8002620 <HAL_RCC_OscConfig+0x29c>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	4a58      	ldr	r2, [pc, #352]	; (8002624 <HAL_RCC_OscConfig+0x2a0>)
 80024c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024c4:	4b58      	ldr	r3, [pc, #352]	; (8002628 <HAL_RCC_OscConfig+0x2a4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fe67 	bl	800119c <HAL_InitTick>
 80024ce:	4603      	mov	r3, r0
 80024d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d052      	beq.n	800257e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	e331      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d032      	beq.n	800254a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024e4:	4b4d      	ldr	r3, [pc, #308]	; (800261c <HAL_RCC_OscConfig+0x298>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a4c      	ldr	r2, [pc, #304]	; (800261c <HAL_RCC_OscConfig+0x298>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024f0:	f7fe ff7c 	bl	80013ec <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024f8:	f7fe ff78 	bl	80013ec <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e31a      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800250a:	4b44      	ldr	r3, [pc, #272]	; (800261c <HAL_RCC_OscConfig+0x298>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002516:	4b41      	ldr	r3, [pc, #260]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a40      	ldr	r2, [pc, #256]	; (800261c <HAL_RCC_OscConfig+0x298>)
 800251c:	f043 0308 	orr.w	r3, r3, #8
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b3e      	ldr	r3, [pc, #248]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	493b      	ldr	r1, [pc, #236]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002530:	4313      	orrs	r3, r2
 8002532:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002534:	4b39      	ldr	r3, [pc, #228]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	4936      	ldr	r1, [pc, #216]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
 8002548:	e01a      	b.n	8002580 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800254a:	4b34      	ldr	r3, [pc, #208]	; (800261c <HAL_RCC_OscConfig+0x298>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a33      	ldr	r2, [pc, #204]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002556:	f7fe ff49 	bl	80013ec <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800255e:	f7fe ff45 	bl	80013ec <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e2e7      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002570:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f0      	bne.n	800255e <HAL_RCC_OscConfig+0x1da>
 800257c:	e000      	b.n	8002580 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800257e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d074      	beq.n	8002676 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	2b08      	cmp	r3, #8
 8002590:	d005      	beq.n	800259e <HAL_RCC_OscConfig+0x21a>
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b0c      	cmp	r3, #12
 8002596:	d10e      	bne.n	80025b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d10b      	bne.n	80025b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259e:	4b1f      	ldr	r3, [pc, #124]	; (800261c <HAL_RCC_OscConfig+0x298>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d064      	beq.n	8002674 <HAL_RCC_OscConfig+0x2f0>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d160      	bne.n	8002674 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e2c4      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x24a>
 80025c0:	4b16      	ldr	r3, [pc, #88]	; (800261c <HAL_RCC_OscConfig+0x298>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a15      	ldr	r2, [pc, #84]	; (800261c <HAL_RCC_OscConfig+0x298>)
 80025c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	e01d      	b.n	800260a <HAL_RCC_OscConfig+0x286>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025d6:	d10c      	bne.n	80025f2 <HAL_RCC_OscConfig+0x26e>
 80025d8:	4b10      	ldr	r3, [pc, #64]	; (800261c <HAL_RCC_OscConfig+0x298>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0f      	ldr	r2, [pc, #60]	; (800261c <HAL_RCC_OscConfig+0x298>)
 80025de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	4b0d      	ldr	r3, [pc, #52]	; (800261c <HAL_RCC_OscConfig+0x298>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0c      	ldr	r2, [pc, #48]	; (800261c <HAL_RCC_OscConfig+0x298>)
 80025ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	e00b      	b.n	800260a <HAL_RCC_OscConfig+0x286>
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <HAL_RCC_OscConfig+0x298>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a09      	ldr	r2, [pc, #36]	; (800261c <HAL_RCC_OscConfig+0x298>)
 80025f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a06      	ldr	r2, [pc, #24]	; (800261c <HAL_RCC_OscConfig+0x298>)
 8002604:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002608:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d01c      	beq.n	800264c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7fe feeb 	bl	80013ec <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002618:	e011      	b.n	800263e <HAL_RCC_OscConfig+0x2ba>
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	080062f4 	.word	0x080062f4
 8002624:	20000000 	.word	0x20000000
 8002628:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800262c:	f7fe fede 	bl	80013ec <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	; 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e280      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800263e:	4baf      	ldr	r3, [pc, #700]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x2a8>
 800264a:	e014      	b.n	8002676 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fece 	bl	80013ec <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002654:	f7fe feca 	bl	80013ec <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e26c      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002666:	4ba5      	ldr	r3, [pc, #660]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x2d0>
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d060      	beq.n	8002744 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	2b04      	cmp	r3, #4
 8002686:	d005      	beq.n	8002694 <HAL_RCC_OscConfig+0x310>
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b0c      	cmp	r3, #12
 800268c:	d119      	bne.n	80026c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d116      	bne.n	80026c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002694:	4b99      	ldr	r3, [pc, #612]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_OscConfig+0x328>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e249      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ac:	4b93      	ldr	r3, [pc, #588]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	061b      	lsls	r3, r3, #24
 80026ba:	4990      	ldr	r1, [pc, #576]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026c0:	e040      	b.n	8002744 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d023      	beq.n	8002712 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ca:	4b8c      	ldr	r3, [pc, #560]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a8b      	ldr	r2, [pc, #556]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7fe fe89 	bl	80013ec <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026de:	f7fe fe85 	bl	80013ec <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e227      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f0:	4b82      	ldr	r3, [pc, #520]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fc:	4b7f      	ldr	r3, [pc, #508]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	061b      	lsls	r3, r3, #24
 800270a:	497c      	ldr	r1, [pc, #496]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
 8002710:	e018      	b.n	8002744 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002712:	4b7a      	ldr	r3, [pc, #488]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a79      	ldr	r2, [pc, #484]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 8002718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800271c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271e:	f7fe fe65 	bl	80013ec <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002726:	f7fe fe61 	bl	80013ec <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e203      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002738:	4b70      	ldr	r3, [pc, #448]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f0      	bne.n	8002726 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d03c      	beq.n	80027ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01c      	beq.n	8002792 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002758:	4b68      	ldr	r3, [pc, #416]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 800275a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800275e:	4a67      	ldr	r2, [pc, #412]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7fe fe40 	bl	80013ec <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002770:	f7fe fe3c 	bl	80013ec <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e1de      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002782:	4b5e      	ldr	r3, [pc, #376]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 8002784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ef      	beq.n	8002770 <HAL_RCC_OscConfig+0x3ec>
 8002790:	e01b      	b.n	80027ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002792:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 8002794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002798:	4a58      	ldr	r2, [pc, #352]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a2:	f7fe fe23 	bl	80013ec <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027aa:	f7fe fe1f 	bl	80013ec <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e1c1      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027bc:	4b4f      	ldr	r3, [pc, #316]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 80027be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1ef      	bne.n	80027aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 80a6 	beq.w	8002924 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d8:	2300      	movs	r3, #0
 80027da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027dc:	4b47      	ldr	r3, [pc, #284]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10d      	bne.n	8002804 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e8:	4b44      	ldr	r3, [pc, #272]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	4a43      	ldr	r2, [pc, #268]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 80027ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f2:	6593      	str	r3, [r2, #88]	; 0x58
 80027f4:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002800:	2301      	movs	r3, #1
 8002802:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002804:	4b3e      	ldr	r3, [pc, #248]	; (8002900 <HAL_RCC_OscConfig+0x57c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d118      	bne.n	8002842 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002810:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCC_OscConfig+0x57c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a3a      	ldr	r2, [pc, #232]	; (8002900 <HAL_RCC_OscConfig+0x57c>)
 8002816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281c:	f7fe fde6 	bl	80013ec <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002824:	f7fe fde2 	bl	80013ec <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e184      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002836:	4b32      	ldr	r3, [pc, #200]	; (8002900 <HAL_RCC_OscConfig+0x57c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d108      	bne.n	800285c <HAL_RCC_OscConfig+0x4d8>
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002850:	4a2a      	ldr	r2, [pc, #168]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800285a:	e024      	b.n	80028a6 <HAL_RCC_OscConfig+0x522>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b05      	cmp	r3, #5
 8002862:	d110      	bne.n	8002886 <HAL_RCC_OscConfig+0x502>
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	4a24      	ldr	r2, [pc, #144]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002874:	4b21      	ldr	r3, [pc, #132]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	4a20      	ldr	r2, [pc, #128]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002884:	e00f      	b.n	80028a6 <HAL_RCC_OscConfig+0x522>
 8002886:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 8002888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288c:	4a1b      	ldr	r2, [pc, #108]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 800288e:	f023 0301 	bic.w	r3, r3, #1
 8002892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002896:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289c:	4a17      	ldr	r2, [pc, #92]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 800289e:	f023 0304 	bic.w	r3, r3, #4
 80028a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d016      	beq.n	80028dc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ae:	f7fe fd9d 	bl	80013ec <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b4:	e00a      	b.n	80028cc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b6:	f7fe fd99 	bl	80013ec <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e139      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_RCC_OscConfig+0x578>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0ed      	beq.n	80028b6 <HAL_RCC_OscConfig+0x532>
 80028da:	e01a      	b.n	8002912 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7fe fd86 	bl	80013ec <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028e2:	e00f      	b.n	8002904 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e4:	f7fe fd82 	bl	80013ec <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d906      	bls.n	8002904 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e122      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002904:	4b90      	ldr	r3, [pc, #576]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e8      	bne.n	80028e4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002912:	7ffb      	ldrb	r3, [r7, #31]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d105      	bne.n	8002924 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002918:	4b8b      	ldr	r3, [pc, #556]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 800291a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291c:	4a8a      	ldr	r2, [pc, #552]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 800291e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002922:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8108 	beq.w	8002b3e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	2b02      	cmp	r3, #2
 8002934:	f040 80d0 	bne.w	8002ad8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002938:	4b83      	ldr	r3, [pc, #524]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f003 0203 	and.w	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	429a      	cmp	r2, r3
 800294a:	d130      	bne.n	80029ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	3b01      	subs	r3, #1
 8002958:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d127      	bne.n	80029ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002968:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d11f      	bne.n	80029ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002978:	2a07      	cmp	r2, #7
 800297a:	bf14      	ite	ne
 800297c:	2201      	movne	r2, #1
 800297e:	2200      	moveq	r2, #0
 8002980:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002982:	4293      	cmp	r3, r2
 8002984:	d113      	bne.n	80029ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	3b01      	subs	r3, #1
 8002994:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002996:	429a      	cmp	r2, r3
 8002998:	d109      	bne.n	80029ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	085b      	lsrs	r3, r3, #1
 80029a6:	3b01      	subs	r3, #1
 80029a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d06e      	beq.n	8002a8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	2b0c      	cmp	r3, #12
 80029b2:	d069      	beq.n	8002a88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029b4:	4b64      	ldr	r3, [pc, #400]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d105      	bne.n	80029cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029c0:	4b61      	ldr	r3, [pc, #388]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0b7      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029d0:	4b5d      	ldr	r3, [pc, #372]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a5c      	ldr	r2, [pc, #368]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 80029d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029dc:	f7fe fd06 	bl	80013ec <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e4:	f7fe fd02 	bl	80013ec <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e0a4      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f6:	4b54      	ldr	r3, [pc, #336]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a02:	4b51      	ldr	r3, [pc, #324]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	4b51      	ldr	r3, [pc, #324]	; (8002b4c <HAL_RCC_OscConfig+0x7c8>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a12:	3a01      	subs	r2, #1
 8002a14:	0112      	lsls	r2, r2, #4
 8002a16:	4311      	orrs	r1, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a1c:	0212      	lsls	r2, r2, #8
 8002a1e:	4311      	orrs	r1, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a24:	0852      	lsrs	r2, r2, #1
 8002a26:	3a01      	subs	r2, #1
 8002a28:	0552      	lsls	r2, r2, #21
 8002a2a:	4311      	orrs	r1, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a30:	0852      	lsrs	r2, r2, #1
 8002a32:	3a01      	subs	r2, #1
 8002a34:	0652      	lsls	r2, r2, #25
 8002a36:	4311      	orrs	r1, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a3c:	0912      	lsrs	r2, r2, #4
 8002a3e:	0452      	lsls	r2, r2, #17
 8002a40:	430a      	orrs	r2, r1
 8002a42:	4941      	ldr	r1, [pc, #260]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a48:	4b3f      	ldr	r3, [pc, #252]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a3e      	ldr	r2, [pc, #248]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a54:	4b3c      	ldr	r3, [pc, #240]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4a3b      	ldr	r2, [pc, #236]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a60:	f7fe fcc4 	bl	80013ec <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a68:	f7fe fcc0 	bl	80013ec <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e062      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7a:	4b33      	ldr	r3, [pc, #204]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a86:	e05a      	b.n	8002b3e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e059      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8c:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d152      	bne.n	8002b3e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a98:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a2a      	ldr	r2, [pc, #168]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aa4:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a27      	ldr	r2, [pc, #156]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ab0:	f7fe fc9c 	bl	80013ec <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe fc98 	bl	80013ec <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e03a      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aca:	4b1f      	ldr	r3, [pc, #124]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x734>
 8002ad6:	e032      	b.n	8002b3e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b0c      	cmp	r3, #12
 8002adc:	d02d      	beq.n	8002b3a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ade:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002ae4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002aea:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d105      	bne.n	8002b02 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002af6:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	4a13      	ldr	r2, [pc, #76]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002afc:	f023 0303 	bic.w	r3, r3, #3
 8002b00:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	4a10      	ldr	r2, [pc, #64]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002b08:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b10:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b12:	f7fe fc6b 	bl	80013ec <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7fe fc67 	bl	80013ec <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e009      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_RCC_OscConfig+0x7c4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x796>
 8002b38:	e001      	b.n	8002b3e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3720      	adds	r7, #32
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	f99d808c 	.word	0xf99d808c

08002b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0c8      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b64:	4b66      	ldr	r3, [pc, #408]	; (8002d00 <HAL_RCC_ClockConfig+0x1b0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d910      	bls.n	8002b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <HAL_RCC_ClockConfig+0x1b0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 0207 	bic.w	r2, r3, #7
 8002b7a:	4961      	ldr	r1, [pc, #388]	; (8002d00 <HAL_RCC_ClockConfig+0x1b0>)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b5f      	ldr	r3, [pc, #380]	; (8002d00 <HAL_RCC_ClockConfig+0x1b0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0b0      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d04c      	beq.n	8002c3a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d107      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba8:	4b56      	ldr	r3, [pc, #344]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d121      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e09e      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d107      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bc0:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d115      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e092      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bd8:	4b4a      	ldr	r3, [pc, #296]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d109      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e086      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be8:	4b46      	ldr	r3, [pc, #280]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e07e      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bf8:	4b42      	ldr	r3, [pc, #264]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f023 0203 	bic.w	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	493f      	ldr	r1, [pc, #252]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0a:	f7fe fbef 	bl	80013ec <HAL_GetTick>
 8002c0e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c10:	e00a      	b.n	8002c28 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c12:	f7fe fbeb 	bl	80013ec <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e066      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c28:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 020c 	and.w	r2, r3, #12
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d1eb      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c46:	4b2f      	ldr	r3, [pc, #188]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	492c      	ldr	r1, [pc, #176]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c58:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <HAL_RCC_ClockConfig+0x1b0>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d210      	bcs.n	8002c88 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <HAL_RCC_ClockConfig+0x1b0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 0207 	bic.w	r2, r3, #7
 8002c6e:	4924      	ldr	r1, [pc, #144]	; (8002d00 <HAL_RCC_ClockConfig+0x1b0>)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <HAL_RCC_ClockConfig+0x1b0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e036      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4918      	ldr	r1, [pc, #96]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cb2:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4910      	ldr	r1, [pc, #64]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cc6:	f000 f825 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <HAL_RCC_ClockConfig+0x1b4>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	490c      	ldr	r1, [pc, #48]	; (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	5ccb      	ldrb	r3, [r1, r3]
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe fa56 	bl	800119c <HAL_InitTick>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cf4:	7afb      	ldrb	r3, [r7, #11]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40022000 	.word	0x40022000
 8002d04:	40021000 	.word	0x40021000
 8002d08:	080062f4 	.word	0x080062f4
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	20000004 	.word	0x20000004

08002d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d22:	4b3e      	ldr	r3, [pc, #248]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d2c:	4b3b      	ldr	r3, [pc, #236]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0x34>
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d121      	bne.n	8002d86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d11e      	bne.n	8002d86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d48:	4b34      	ldr	r3, [pc, #208]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d107      	bne.n	8002d64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d54:	4b31      	ldr	r3, [pc, #196]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	e005      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d64:	4b2d      	ldr	r3, [pc, #180]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d70:	4a2b      	ldr	r2, [pc, #172]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10d      	bne.n	8002d9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d102      	bne.n	8002d92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d8c:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d8e:	61bb      	str	r3, [r7, #24]
 8002d90:	e004      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d98:	4b23      	ldr	r3, [pc, #140]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	d134      	bne.n	8002e0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002da2:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d003      	beq.n	8002dba <HAL_RCC_GetSysClockFreq+0xa6>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d003      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0xac>
 8002db8:	e005      	b.n	8002dc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dba:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dbc:	617b      	str	r3, [r7, #20]
      break;
 8002dbe:	e005      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dc2:	617b      	str	r3, [r7, #20]
      break;
 8002dc4:	e002      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	617b      	str	r3, [r7, #20]
      break;
 8002dca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dcc:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	fb02 f203 	mul.w	r2, r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	0e5b      	lsrs	r3, r3, #25
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e0c:	69bb      	ldr	r3, [r7, #24]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3724      	adds	r7, #36	; 0x24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	0800630c 	.word	0x0800630c
 8002e24:	00f42400 	.word	0x00f42400
 8002e28:	007a1200 	.word	0x007a1200

08002e2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e32:	681b      	ldr	r3, [r3, #0]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000000 	.word	0x20000000

08002e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e48:	f7ff fff0 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	4904      	ldr	r1, [pc, #16]	; (8002e6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e5a:	5ccb      	ldrb	r3, [r1, r3]
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	08006304 	.word	0x08006304

08002e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e74:	f7ff ffda 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	0adb      	lsrs	r3, r3, #11
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	4904      	ldr	r1, [pc, #16]	; (8002e98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e86:	5ccb      	ldrb	r3, [r1, r3]
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000
 8002e98:	08006304 	.word	0x08006304

08002e9c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	220f      	movs	r2, #15
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002eac:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0203 	and.w	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	08db      	lsrs	r3, r3, #3
 8002ed6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002ede:	4b07      	ldr	r3, [pc, #28]	; (8002efc <HAL_RCC_GetClockConfig+0x60>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0207 	and.w	r2, r3, #7
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	601a      	str	r2, [r3, #0]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40022000 	.word	0x40022000

08002f00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f0c:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f18:	f7ff f904 	bl	8002124 <HAL_PWREx_GetVoltageRange>
 8002f1c:	6178      	str	r0, [r7, #20]
 8002f1e:	e014      	b.n	8002f4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f20:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	4a24      	ldr	r2, [pc, #144]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f2c:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f38:	f7ff f8f4 	bl	8002124 <HAL_PWREx_GetVoltageRange>
 8002f3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f3e:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f42:	4a1d      	ldr	r2, [pc, #116]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f50:	d10b      	bne.n	8002f6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b80      	cmp	r3, #128	; 0x80
 8002f56:	d919      	bls.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2ba0      	cmp	r3, #160	; 0xa0
 8002f5c:	d902      	bls.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f5e:	2302      	movs	r3, #2
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	e013      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f64:	2301      	movs	r3, #1
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	e010      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b80      	cmp	r3, #128	; 0x80
 8002f6e:	d902      	bls.n	8002f76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f70:	2303      	movs	r3, #3
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	e00a      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b80      	cmp	r3, #128	; 0x80
 8002f7a:	d102      	bne.n	8002f82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	e004      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b70      	cmp	r3, #112	; 0x70
 8002f86:	d101      	bne.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f88:	2301      	movs	r3, #1
 8002f8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f023 0207 	bic.w	r2, r3, #7
 8002f94:	4909      	ldr	r1, [pc, #36]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f9c:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d001      	beq.n	8002fae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40022000 	.word	0x40022000

08002fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fc8:	2300      	movs	r3, #0
 8002fca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fcc:	2300      	movs	r3, #0
 8002fce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d041      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fe4:	d02a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fe6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fea:	d824      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ff0:	d008      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ff2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ff6:	d81e      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ffc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003000:	d010      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003002:	e018      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003004:	4b86      	ldr	r3, [pc, #536]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a85      	ldr	r2, [pc, #532]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003010:	e015      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f000 facb 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003022:	e00c      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3320      	adds	r3, #32
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fbb6 	bl	800379c <RCCEx_PLLSAI2_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003034:	e003      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	74fb      	strb	r3, [r7, #19]
      break;
 800303a:	e000      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800303c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303e:	7cfb      	ldrb	r3, [r7, #19]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003044:	4b76      	ldr	r3, [pc, #472]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003052:	4973      	ldr	r1, [pc, #460]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800305a:	e001      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	7cfb      	ldrb	r3, [r7, #19]
 800305e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d041      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003070:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003074:	d02a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003076:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800307a:	d824      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800307c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003080:	d008      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003082:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003086:	d81e      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800308c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003090:	d010      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003092:	e018      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003094:	4b62      	ldr	r3, [pc, #392]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a61      	ldr	r2, [pc, #388]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030a0:	e015      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fa83 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030b2:	e00c      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3320      	adds	r3, #32
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fb6e 	bl	800379c <RCCEx_PLLSAI2_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030c4:	e003      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	74fb      	strb	r3, [r7, #19]
      break;
 80030ca:	e000      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030d4:	4b52      	ldr	r3, [pc, #328]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e2:	494f      	ldr	r1, [pc, #316]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030ea:	e001      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80a0 	beq.w	800323e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fe:	2300      	movs	r3, #0
 8003100:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003102:	4b47      	ldr	r3, [pc, #284]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003112:	2300      	movs	r3, #0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00d      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003118:	4b41      	ldr	r3, [pc, #260]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311c:	4a40      	ldr	r2, [pc, #256]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003122:	6593      	str	r3, [r2, #88]	; 0x58
 8003124:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003130:	2301      	movs	r3, #1
 8003132:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003134:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a3a      	ldr	r2, [pc, #232]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800313a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003140:	f7fe f954 	bl	80013ec <HAL_GetTick>
 8003144:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003146:	e009      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003148:	f7fe f950 	bl	80013ec <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d902      	bls.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	74fb      	strb	r3, [r7, #19]
        break;
 800315a:	e005      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800315c:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ef      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d15c      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800316e:	4b2c      	ldr	r3, [pc, #176]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003178:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01f      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	429a      	cmp	r2, r3
 800318a:	d019      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800318c:	4b24      	ldr	r3, [pc, #144]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003196:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003198:	4b21      	ldr	r3, [pc, #132]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319e:	4a20      	ldr	r2, [pc, #128]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031a8:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	4a1c      	ldr	r2, [pc, #112]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031b8:	4a19      	ldr	r2, [pc, #100]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d016      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ca:	f7fe f90f 	bl	80013ec <HAL_GetTick>
 80031ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d0:	e00b      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7fe f90b 	bl	80013ec <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d902      	bls.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	74fb      	strb	r3, [r7, #19]
            break;
 80031e8:	e006      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ec      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10c      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800320e:	4904      	ldr	r1, [pc, #16]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003216:	e009      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	74bb      	strb	r3, [r7, #18]
 800321c:	e006      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000
 8003224:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800322c:	7c7b      	ldrb	r3, [r7, #17]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d105      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003232:	4b9e      	ldr	r3, [pc, #632]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	4a9d      	ldr	r2, [pc, #628]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800324a:	4b98      	ldr	r3, [pc, #608]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	f023 0203 	bic.w	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003258:	4994      	ldr	r1, [pc, #592]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800326c:	4b8f      	ldr	r3, [pc, #572]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	f023 020c 	bic.w	r2, r3, #12
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327a:	498c      	ldr	r1, [pc, #560]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800328e:	4b87      	ldr	r3, [pc, #540]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	4983      	ldr	r1, [pc, #524]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032b0:	4b7e      	ldr	r3, [pc, #504]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	497b      	ldr	r1, [pc, #492]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032d2:	4b76      	ldr	r3, [pc, #472]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e0:	4972      	ldr	r1, [pc, #456]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032f4:	4b6d      	ldr	r3, [pc, #436]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003302:	496a      	ldr	r1, [pc, #424]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003316:	4b65      	ldr	r3, [pc, #404]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	4961      	ldr	r1, [pc, #388]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003338:	4b5c      	ldr	r3, [pc, #368]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003346:	4959      	ldr	r1, [pc, #356]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800335a:	4b54      	ldr	r3, [pc, #336]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003360:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003368:	4950      	ldr	r1, [pc, #320]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800337c:	4b4b      	ldr	r3, [pc, #300]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	4948      	ldr	r1, [pc, #288]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800339e:	4b43      	ldr	r3, [pc, #268]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	493f      	ldr	r1, [pc, #252]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d028      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033c0:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ce:	4937      	ldr	r1, [pc, #220]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033de:	d106      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e0:	4b32      	ldr	r3, [pc, #200]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4a31      	ldr	r2, [pc, #196]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ea:	60d3      	str	r3, [r2, #12]
 80033ec:	e011      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033f6:	d10c      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	2101      	movs	r1, #1
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f8d8 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d028      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800341e:	4b23      	ldr	r3, [pc, #140]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	491f      	ldr	r1, [pc, #124]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800343c:	d106      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800343e:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	4a1a      	ldr	r2, [pc, #104]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003448:	60d3      	str	r3, [r2, #12]
 800344a:	e011      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003454:	d10c      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3304      	adds	r3, #4
 800345a:	2101      	movs	r1, #1
 800345c:	4618      	mov	r0, r3
 800345e:	f000 f8a9 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003466:	7cfb      	ldrb	r3, [r7, #19]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d02b      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348a:	4908      	ldr	r1, [pc, #32]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800349a:	d109      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800349c:	4b03      	ldr	r3, [pc, #12]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4a02      	ldr	r2, [pc, #8]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034a6:	60d3      	str	r3, [r2, #12]
 80034a8:	e014      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3304      	adds	r3, #4
 80034be:	2101      	movs	r1, #1
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f877 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ca:	7cfb      	ldrb	r3, [r7, #19]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d02f      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034e0:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ee:	4928      	ldr	r1, [pc, #160]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034fe:	d10d      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	2102      	movs	r1, #2
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f854 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d014      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	74bb      	strb	r3, [r7, #18]
 800351a:	e011      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003524:	d10c      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3320      	adds	r3, #32
 800352a:	2102      	movs	r1, #2
 800352c:	4618      	mov	r0, r3
 800352e:	f000 f935 	bl	800379c <RCCEx_PLLSAI2_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003536:	7cfb      	ldrb	r3, [r7, #19]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800355a:	490d      	ldr	r1, [pc, #52]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800357e:	4904      	ldr	r1, [pc, #16]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003586:	7cbb      	ldrb	r3, [r7, #18]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000

08003594 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800359e:	f043 0304 	orr.w	r3, r3, #4
 80035a2:	6013      	str	r3, [r2, #0]
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40021000 	.word	0x40021000

080035b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035c2:	4b75      	ldr	r3, [pc, #468]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d018      	beq.n	8003600 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035ce:	4b72      	ldr	r3, [pc, #456]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f003 0203 	and.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d10d      	bne.n	80035fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
       ||
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035e6:	4b6c      	ldr	r3, [pc, #432]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
       ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d047      	beq.n	800368a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	e044      	b.n	800368a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d018      	beq.n	800363a <RCCEx_PLLSAI1_Config+0x86>
 8003608:	2b03      	cmp	r3, #3
 800360a:	d825      	bhi.n	8003658 <RCCEx_PLLSAI1_Config+0xa4>
 800360c:	2b01      	cmp	r3, #1
 800360e:	d002      	beq.n	8003616 <RCCEx_PLLSAI1_Config+0x62>
 8003610:	2b02      	cmp	r3, #2
 8003612:	d009      	beq.n	8003628 <RCCEx_PLLSAI1_Config+0x74>
 8003614:	e020      	b.n	8003658 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003616:	4b60      	ldr	r3, [pc, #384]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11d      	bne.n	800365e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003626:	e01a      	b.n	800365e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003628:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d116      	bne.n	8003662 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003638:	e013      	b.n	8003662 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800363a:	4b57      	ldr	r3, [pc, #348]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003646:	4b54      	ldr	r3, [pc, #336]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003656:	e006      	b.n	8003666 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      break;
 800365c:	e004      	b.n	8003668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800365e:	bf00      	nop
 8003660:	e002      	b.n	8003668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003666:	bf00      	nop
    }

    if(status == HAL_OK)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10d      	bne.n	800368a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800366e:	4b4a      	ldr	r3, [pc, #296]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6819      	ldr	r1, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	430b      	orrs	r3, r1
 8003684:	4944      	ldr	r1, [pc, #272]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003686:	4313      	orrs	r3, r2
 8003688:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d17d      	bne.n	800378c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003690:	4b41      	ldr	r3, [pc, #260]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a40      	ldr	r2, [pc, #256]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003696:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800369a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369c:	f7fd fea6 	bl	80013ec <HAL_GetTick>
 80036a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036a2:	e009      	b.n	80036b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036a4:	f7fd fea2 	bl	80013ec <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d902      	bls.n	80036b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	73fb      	strb	r3, [r7, #15]
        break;
 80036b6:	e005      	b.n	80036c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036b8:	4b37      	ldr	r3, [pc, #220]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ef      	bne.n	80036a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d160      	bne.n	800378c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d111      	bne.n	80036f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036d0:	4b31      	ldr	r3, [pc, #196]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6892      	ldr	r2, [r2, #8]
 80036e0:	0211      	lsls	r1, r2, #8
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68d2      	ldr	r2, [r2, #12]
 80036e6:	0912      	lsrs	r2, r2, #4
 80036e8:	0452      	lsls	r2, r2, #17
 80036ea:	430a      	orrs	r2, r1
 80036ec:	492a      	ldr	r1, [pc, #168]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	610b      	str	r3, [r1, #16]
 80036f2:	e027      	b.n	8003744 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d112      	bne.n	8003720 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036fa:	4b27      	ldr	r3, [pc, #156]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003702:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6892      	ldr	r2, [r2, #8]
 800370a:	0211      	lsls	r1, r2, #8
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6912      	ldr	r2, [r2, #16]
 8003710:	0852      	lsrs	r2, r2, #1
 8003712:	3a01      	subs	r2, #1
 8003714:	0552      	lsls	r2, r2, #21
 8003716:	430a      	orrs	r2, r1
 8003718:	491f      	ldr	r1, [pc, #124]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	610b      	str	r3, [r1, #16]
 800371e:	e011      	b.n	8003744 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003720:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003728:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6892      	ldr	r2, [r2, #8]
 8003730:	0211      	lsls	r1, r2, #8
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6952      	ldr	r2, [r2, #20]
 8003736:	0852      	lsrs	r2, r2, #1
 8003738:	3a01      	subs	r2, #1
 800373a:	0652      	lsls	r2, r2, #25
 800373c:	430a      	orrs	r2, r1
 800373e:	4916      	ldr	r1, [pc, #88]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003740:	4313      	orrs	r3, r2
 8003742:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a13      	ldr	r2, [pc, #76]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800374e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fd fe4c 	bl	80013ec <HAL_GetTick>
 8003754:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003756:	e009      	b.n	800376c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003758:	f7fd fe48 	bl	80013ec <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d902      	bls.n	800376c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	73fb      	strb	r3, [r7, #15]
          break;
 800376a:	e005      	b.n	8003778 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800376c:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0ef      	beq.n	8003758 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	4904      	ldr	r1, [pc, #16]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003788:	4313      	orrs	r3, r2
 800378a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800378c:	7bfb      	ldrb	r3, [r7, #15]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000

0800379c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037aa:	4b6a      	ldr	r3, [pc, #424]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d018      	beq.n	80037e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037b6:	4b67      	ldr	r3, [pc, #412]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f003 0203 	and.w	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d10d      	bne.n	80037e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
       ||
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037ce:	4b61      	ldr	r3, [pc, #388]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	091b      	lsrs	r3, r3, #4
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
       ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d047      	beq.n	8003872 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
 80037e6:	e044      	b.n	8003872 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d018      	beq.n	8003822 <RCCEx_PLLSAI2_Config+0x86>
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d825      	bhi.n	8003840 <RCCEx_PLLSAI2_Config+0xa4>
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d002      	beq.n	80037fe <RCCEx_PLLSAI2_Config+0x62>
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d009      	beq.n	8003810 <RCCEx_PLLSAI2_Config+0x74>
 80037fc:	e020      	b.n	8003840 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037fe:	4b55      	ldr	r3, [pc, #340]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d11d      	bne.n	8003846 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800380e:	e01a      	b.n	8003846 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003810:	4b50      	ldr	r3, [pc, #320]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003818:	2b00      	cmp	r3, #0
 800381a:	d116      	bne.n	800384a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003820:	e013      	b.n	800384a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003822:	4b4c      	ldr	r3, [pc, #304]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10f      	bne.n	800384e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800382e:	4b49      	ldr	r3, [pc, #292]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800383e:	e006      	b.n	800384e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
      break;
 8003844:	e004      	b.n	8003850 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003846:	bf00      	nop
 8003848:	e002      	b.n	8003850 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800384a:	bf00      	nop
 800384c:	e000      	b.n	8003850 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800384e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10d      	bne.n	8003872 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003856:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6819      	ldr	r1, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	3b01      	subs	r3, #1
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	430b      	orrs	r3, r1
 800386c:	4939      	ldr	r1, [pc, #228]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386e:	4313      	orrs	r3, r2
 8003870:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d167      	bne.n	8003948 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003878:	4b36      	ldr	r3, [pc, #216]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a35      	ldr	r2, [pc, #212]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003884:	f7fd fdb2 	bl	80013ec <HAL_GetTick>
 8003888:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800388a:	e009      	b.n	80038a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800388c:	f7fd fdae 	bl	80013ec <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d902      	bls.n	80038a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	73fb      	strb	r3, [r7, #15]
        break;
 800389e:	e005      	b.n	80038ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038a0:	4b2c      	ldr	r3, [pc, #176]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ef      	bne.n	800388c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d14a      	bne.n	8003948 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d111      	bne.n	80038dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038b8:	4b26      	ldr	r3, [pc, #152]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6892      	ldr	r2, [r2, #8]
 80038c8:	0211      	lsls	r1, r2, #8
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68d2      	ldr	r2, [r2, #12]
 80038ce:	0912      	lsrs	r2, r2, #4
 80038d0:	0452      	lsls	r2, r2, #17
 80038d2:	430a      	orrs	r2, r1
 80038d4:	491f      	ldr	r1, [pc, #124]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	614b      	str	r3, [r1, #20]
 80038da:	e011      	b.n	8003900 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038dc:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6892      	ldr	r2, [r2, #8]
 80038ec:	0211      	lsls	r1, r2, #8
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6912      	ldr	r2, [r2, #16]
 80038f2:	0852      	lsrs	r2, r2, #1
 80038f4:	3a01      	subs	r2, #1
 80038f6:	0652      	lsls	r2, r2, #25
 80038f8:	430a      	orrs	r2, r1
 80038fa:	4916      	ldr	r1, [pc, #88]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003900:	4b14      	ldr	r3, [pc, #80]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a13      	ldr	r2, [pc, #76]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fd fd6e 	bl	80013ec <HAL_GetTick>
 8003910:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003912:	e009      	b.n	8003928 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003914:	f7fd fd6a 	bl	80013ec <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d902      	bls.n	8003928 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	73fb      	strb	r3, [r7, #15]
          break;
 8003926:	e005      	b.n	8003934 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0ef      	beq.n	8003914 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393c:	695a      	ldr	r2, [r3, #20]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	4904      	ldr	r1, [pc, #16]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003944:	4313      	orrs	r3, r2
 8003946:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000

08003958 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e095      	b.n	8003a96 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	2b00      	cmp	r3, #0
 8003970:	d108      	bne.n	8003984 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800397a:	d009      	beq.n	8003990 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	61da      	str	r2, [r3, #28]
 8003982:	e005      	b.n	8003990 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fd fad0 	bl	8000f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039d0:	d902      	bls.n	80039d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	e002      	b.n	80039de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039e6:	d007      	beq.n	80039f8 <HAL_SPI_Init+0xa0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039f0:	d002      	beq.n	80039f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3a:	ea42 0103 	orr.w	r1, r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	0c1b      	lsrs	r3, r3, #16
 8003a54:	f003 0204 	and.w	r2, r3, #4
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a74:	ea42 0103 	orr.w	r1, r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e049      	b.n	8003b44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d106      	bne.n	8003aca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f841 	bl	8003b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2202      	movs	r2, #2
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	4619      	mov	r1, r3
 8003adc:	4610      	mov	r0, r2
 8003ade:	f000 f9f7 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d001      	beq.n	8003b78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e04f      	b.n	8003c18 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a23      	ldr	r2, [pc, #140]	; (8003c24 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d01d      	beq.n	8003bd6 <HAL_TIM_Base_Start_IT+0x76>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba2:	d018      	beq.n	8003bd6 <HAL_TIM_Base_Start_IT+0x76>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1f      	ldr	r2, [pc, #124]	; (8003c28 <HAL_TIM_Base_Start_IT+0xc8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <HAL_TIM_Base_Start_IT+0x76>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1e      	ldr	r2, [pc, #120]	; (8003c2c <HAL_TIM_Base_Start_IT+0xcc>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_TIM_Base_Start_IT+0x76>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1c      	ldr	r2, [pc, #112]	; (8003c30 <HAL_TIM_Base_Start_IT+0xd0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d009      	beq.n	8003bd6 <HAL_TIM_Base_Start_IT+0x76>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d004      	beq.n	8003bd6 <HAL_TIM_Base_Start_IT+0x76>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a19      	ldr	r2, [pc, #100]	; (8003c38 <HAL_TIM_Base_Start_IT+0xd8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d115      	bne.n	8003c02 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	4b17      	ldr	r3, [pc, #92]	; (8003c3c <HAL_TIM_Base_Start_IT+0xdc>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b06      	cmp	r3, #6
 8003be6:	d015      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0xb4>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bee:	d011      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c00:	e008      	b.n	8003c14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0201 	orr.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	e000      	b.n	8003c16 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800
 8003c30:	40000c00 	.word	0x40000c00
 8003c34:	40013400 	.word	0x40013400
 8003c38:	40014000 	.word	0x40014000
 8003c3c:	00010007 	.word	0x00010007

08003c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d122      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d11b      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0202 	mvn.w	r2, #2
 8003c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f905 	bl	8003e92 <HAL_TIM_IC_CaptureCallback>
 8003c88:	e005      	b.n	8003c96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f8f7 	bl	8003e7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f908 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d122      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d11b      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0204 	mvn.w	r2, #4
 8003cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f8db 	bl	8003e92 <HAL_TIM_IC_CaptureCallback>
 8003cdc:	e005      	b.n	8003cea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f8cd 	bl	8003e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f8de 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d122      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d11b      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0208 	mvn.w	r2, #8
 8003d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2204      	movs	r2, #4
 8003d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f8b1 	bl	8003e92 <HAL_TIM_IC_CaptureCallback>
 8003d30:	e005      	b.n	8003d3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f8a3 	bl	8003e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f8b4 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d122      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	2b10      	cmp	r3, #16
 8003d5e:	d11b      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0210 	mvn.w	r2, #16
 8003d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f887 	bl	8003e92 <HAL_TIM_IC_CaptureCallback>
 8003d84:	e005      	b.n	8003d92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f879 	bl	8003e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f88a 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d10e      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d107      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0201 	mvn.w	r2, #1
 8003dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fc ffb6 	bl	8000d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dce:	2b80      	cmp	r3, #128	; 0x80
 8003dd0:	d10e      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ddc:	2b80      	cmp	r3, #128	; 0x80
 8003dde:	d107      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f914 	bl	8004018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfe:	d10e      	bne.n	8003e1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0a:	2b80      	cmp	r3, #128	; 0x80
 8003e0c:	d107      	bne.n	8003e1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f907 	bl	800402c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e28:	2b40      	cmp	r3, #64	; 0x40
 8003e2a:	d10e      	bne.n	8003e4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b40      	cmp	r3, #64	; 0x40
 8003e38:	d107      	bne.n	8003e4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f838 	bl	8003eba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	d10e      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	d107      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f06f 0220 	mvn.w	r2, #32
 8003e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f8c7 	bl	8004004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a40      	ldr	r2, [pc, #256]	; (8003fe4 <TIM_Base_SetConfig+0x114>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d013      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eee:	d00f      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a3d      	ldr	r2, [pc, #244]	; (8003fe8 <TIM_Base_SetConfig+0x118>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00b      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a3c      	ldr	r2, [pc, #240]	; (8003fec <TIM_Base_SetConfig+0x11c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d007      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a3b      	ldr	r2, [pc, #236]	; (8003ff0 <TIM_Base_SetConfig+0x120>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a3a      	ldr	r2, [pc, #232]	; (8003ff4 <TIM_Base_SetConfig+0x124>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d108      	bne.n	8003f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a2f      	ldr	r2, [pc, #188]	; (8003fe4 <TIM_Base_SetConfig+0x114>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01f      	beq.n	8003f6a <TIM_Base_SetConfig+0x9a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f30:	d01b      	beq.n	8003f6a <TIM_Base_SetConfig+0x9a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a2c      	ldr	r2, [pc, #176]	; (8003fe8 <TIM_Base_SetConfig+0x118>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d017      	beq.n	8003f6a <TIM_Base_SetConfig+0x9a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2b      	ldr	r2, [pc, #172]	; (8003fec <TIM_Base_SetConfig+0x11c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d013      	beq.n	8003f6a <TIM_Base_SetConfig+0x9a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a2a      	ldr	r2, [pc, #168]	; (8003ff0 <TIM_Base_SetConfig+0x120>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00f      	beq.n	8003f6a <TIM_Base_SetConfig+0x9a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a29      	ldr	r2, [pc, #164]	; (8003ff4 <TIM_Base_SetConfig+0x124>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00b      	beq.n	8003f6a <TIM_Base_SetConfig+0x9a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a28      	ldr	r2, [pc, #160]	; (8003ff8 <TIM_Base_SetConfig+0x128>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d007      	beq.n	8003f6a <TIM_Base_SetConfig+0x9a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a27      	ldr	r2, [pc, #156]	; (8003ffc <TIM_Base_SetConfig+0x12c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d003      	beq.n	8003f6a <TIM_Base_SetConfig+0x9a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a26      	ldr	r2, [pc, #152]	; (8004000 <TIM_Base_SetConfig+0x130>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d108      	bne.n	8003f7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a10      	ldr	r2, [pc, #64]	; (8003fe4 <TIM_Base_SetConfig+0x114>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00f      	beq.n	8003fc8 <TIM_Base_SetConfig+0xf8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <TIM_Base_SetConfig+0x124>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00b      	beq.n	8003fc8 <TIM_Base_SetConfig+0xf8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a11      	ldr	r2, [pc, #68]	; (8003ff8 <TIM_Base_SetConfig+0x128>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d007      	beq.n	8003fc8 <TIM_Base_SetConfig+0xf8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a10      	ldr	r2, [pc, #64]	; (8003ffc <TIM_Base_SetConfig+0x12c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <TIM_Base_SetConfig+0xf8>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a0f      	ldr	r2, [pc, #60]	; (8004000 <TIM_Base_SetConfig+0x130>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d103      	bne.n	8003fd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	615a      	str	r2, [r3, #20]
}
 8003fd6:	bf00      	nop
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40012c00 	.word	0x40012c00
 8003fe8:	40000400 	.word	0x40000400
 8003fec:	40000800 	.word	0x40000800
 8003ff0:	40000c00 	.word	0x40000c00
 8003ff4:	40013400 	.word	0x40013400
 8003ff8:	40014000 	.word	0x40014000
 8003ffc:	40014400 	.word	0x40014400
 8004000:	40014800 	.word	0x40014800

08004004 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e040      	b.n	80040d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fc ffb8 	bl	8000fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2224      	movs	r2, #36	; 0x24
 800406c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0201 	bic.w	r2, r2, #1
 800407c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f82c 	bl	80040dc <UART_SetConfig>
 8004084:	4603      	mov	r3, r0
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e022      	b.n	80040d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 faaa 	bl	80045f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fb31 	bl	8004734 <UART_CheckIdleState>
 80040d2:	4603      	mov	r3, r0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040dc:	b5b0      	push	{r4, r5, r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	4bad      	ldr	r3, [pc, #692]	; (80043bc <UART_SetConfig+0x2e0>)
 8004108:	4013      	ands	r3, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	69f9      	ldr	r1, [r7, #28]
 8004110:	430b      	orrs	r3, r1
 8004112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4aa2      	ldr	r2, [pc, #648]	; (80043c0 <UART_SetConfig+0x2e4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d004      	beq.n	8004144 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	69fa      	ldr	r2, [r7, #28]
 8004140:	4313      	orrs	r3, r2
 8004142:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	430a      	orrs	r2, r1
 8004156:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a99      	ldr	r2, [pc, #612]	; (80043c4 <UART_SetConfig+0x2e8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d121      	bne.n	80041a6 <UART_SetConfig+0xca>
 8004162:	4b99      	ldr	r3, [pc, #612]	; (80043c8 <UART_SetConfig+0x2ec>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	2b03      	cmp	r3, #3
 800416e:	d817      	bhi.n	80041a0 <UART_SetConfig+0xc4>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <UART_SetConfig+0x9c>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	08004189 	.word	0x08004189
 800417c:	08004195 	.word	0x08004195
 8004180:	0800418f 	.word	0x0800418f
 8004184:	0800419b 	.word	0x0800419b
 8004188:	2301      	movs	r3, #1
 800418a:	76fb      	strb	r3, [r7, #27]
 800418c:	e0e7      	b.n	800435e <UART_SetConfig+0x282>
 800418e:	2302      	movs	r3, #2
 8004190:	76fb      	strb	r3, [r7, #27]
 8004192:	e0e4      	b.n	800435e <UART_SetConfig+0x282>
 8004194:	2304      	movs	r3, #4
 8004196:	76fb      	strb	r3, [r7, #27]
 8004198:	e0e1      	b.n	800435e <UART_SetConfig+0x282>
 800419a:	2308      	movs	r3, #8
 800419c:	76fb      	strb	r3, [r7, #27]
 800419e:	e0de      	b.n	800435e <UART_SetConfig+0x282>
 80041a0:	2310      	movs	r3, #16
 80041a2:	76fb      	strb	r3, [r7, #27]
 80041a4:	e0db      	b.n	800435e <UART_SetConfig+0x282>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a88      	ldr	r2, [pc, #544]	; (80043cc <UART_SetConfig+0x2f0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d132      	bne.n	8004216 <UART_SetConfig+0x13a>
 80041b0:	4b85      	ldr	r3, [pc, #532]	; (80043c8 <UART_SetConfig+0x2ec>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b0c      	cmp	r3, #12
 80041bc:	d828      	bhi.n	8004210 <UART_SetConfig+0x134>
 80041be:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <UART_SetConfig+0xe8>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	080041f9 	.word	0x080041f9
 80041c8:	08004211 	.word	0x08004211
 80041cc:	08004211 	.word	0x08004211
 80041d0:	08004211 	.word	0x08004211
 80041d4:	08004205 	.word	0x08004205
 80041d8:	08004211 	.word	0x08004211
 80041dc:	08004211 	.word	0x08004211
 80041e0:	08004211 	.word	0x08004211
 80041e4:	080041ff 	.word	0x080041ff
 80041e8:	08004211 	.word	0x08004211
 80041ec:	08004211 	.word	0x08004211
 80041f0:	08004211 	.word	0x08004211
 80041f4:	0800420b 	.word	0x0800420b
 80041f8:	2300      	movs	r3, #0
 80041fa:	76fb      	strb	r3, [r7, #27]
 80041fc:	e0af      	b.n	800435e <UART_SetConfig+0x282>
 80041fe:	2302      	movs	r3, #2
 8004200:	76fb      	strb	r3, [r7, #27]
 8004202:	e0ac      	b.n	800435e <UART_SetConfig+0x282>
 8004204:	2304      	movs	r3, #4
 8004206:	76fb      	strb	r3, [r7, #27]
 8004208:	e0a9      	b.n	800435e <UART_SetConfig+0x282>
 800420a:	2308      	movs	r3, #8
 800420c:	76fb      	strb	r3, [r7, #27]
 800420e:	e0a6      	b.n	800435e <UART_SetConfig+0x282>
 8004210:	2310      	movs	r3, #16
 8004212:	76fb      	strb	r3, [r7, #27]
 8004214:	e0a3      	b.n	800435e <UART_SetConfig+0x282>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a6d      	ldr	r2, [pc, #436]	; (80043d0 <UART_SetConfig+0x2f4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d120      	bne.n	8004262 <UART_SetConfig+0x186>
 8004220:	4b69      	ldr	r3, [pc, #420]	; (80043c8 <UART_SetConfig+0x2ec>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004226:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800422a:	2b30      	cmp	r3, #48	; 0x30
 800422c:	d013      	beq.n	8004256 <UART_SetConfig+0x17a>
 800422e:	2b30      	cmp	r3, #48	; 0x30
 8004230:	d814      	bhi.n	800425c <UART_SetConfig+0x180>
 8004232:	2b20      	cmp	r3, #32
 8004234:	d009      	beq.n	800424a <UART_SetConfig+0x16e>
 8004236:	2b20      	cmp	r3, #32
 8004238:	d810      	bhi.n	800425c <UART_SetConfig+0x180>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <UART_SetConfig+0x168>
 800423e:	2b10      	cmp	r3, #16
 8004240:	d006      	beq.n	8004250 <UART_SetConfig+0x174>
 8004242:	e00b      	b.n	800425c <UART_SetConfig+0x180>
 8004244:	2300      	movs	r3, #0
 8004246:	76fb      	strb	r3, [r7, #27]
 8004248:	e089      	b.n	800435e <UART_SetConfig+0x282>
 800424a:	2302      	movs	r3, #2
 800424c:	76fb      	strb	r3, [r7, #27]
 800424e:	e086      	b.n	800435e <UART_SetConfig+0x282>
 8004250:	2304      	movs	r3, #4
 8004252:	76fb      	strb	r3, [r7, #27]
 8004254:	e083      	b.n	800435e <UART_SetConfig+0x282>
 8004256:	2308      	movs	r3, #8
 8004258:	76fb      	strb	r3, [r7, #27]
 800425a:	e080      	b.n	800435e <UART_SetConfig+0x282>
 800425c:	2310      	movs	r3, #16
 800425e:	76fb      	strb	r3, [r7, #27]
 8004260:	e07d      	b.n	800435e <UART_SetConfig+0x282>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a5b      	ldr	r2, [pc, #364]	; (80043d4 <UART_SetConfig+0x2f8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d120      	bne.n	80042ae <UART_SetConfig+0x1d2>
 800426c:	4b56      	ldr	r3, [pc, #344]	; (80043c8 <UART_SetConfig+0x2ec>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004272:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004276:	2bc0      	cmp	r3, #192	; 0xc0
 8004278:	d013      	beq.n	80042a2 <UART_SetConfig+0x1c6>
 800427a:	2bc0      	cmp	r3, #192	; 0xc0
 800427c:	d814      	bhi.n	80042a8 <UART_SetConfig+0x1cc>
 800427e:	2b80      	cmp	r3, #128	; 0x80
 8004280:	d009      	beq.n	8004296 <UART_SetConfig+0x1ba>
 8004282:	2b80      	cmp	r3, #128	; 0x80
 8004284:	d810      	bhi.n	80042a8 <UART_SetConfig+0x1cc>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <UART_SetConfig+0x1b4>
 800428a:	2b40      	cmp	r3, #64	; 0x40
 800428c:	d006      	beq.n	800429c <UART_SetConfig+0x1c0>
 800428e:	e00b      	b.n	80042a8 <UART_SetConfig+0x1cc>
 8004290:	2300      	movs	r3, #0
 8004292:	76fb      	strb	r3, [r7, #27]
 8004294:	e063      	b.n	800435e <UART_SetConfig+0x282>
 8004296:	2302      	movs	r3, #2
 8004298:	76fb      	strb	r3, [r7, #27]
 800429a:	e060      	b.n	800435e <UART_SetConfig+0x282>
 800429c:	2304      	movs	r3, #4
 800429e:	76fb      	strb	r3, [r7, #27]
 80042a0:	e05d      	b.n	800435e <UART_SetConfig+0x282>
 80042a2:	2308      	movs	r3, #8
 80042a4:	76fb      	strb	r3, [r7, #27]
 80042a6:	e05a      	b.n	800435e <UART_SetConfig+0x282>
 80042a8:	2310      	movs	r3, #16
 80042aa:	76fb      	strb	r3, [r7, #27]
 80042ac:	e057      	b.n	800435e <UART_SetConfig+0x282>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a49      	ldr	r2, [pc, #292]	; (80043d8 <UART_SetConfig+0x2fc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d125      	bne.n	8004304 <UART_SetConfig+0x228>
 80042b8:	4b43      	ldr	r3, [pc, #268]	; (80043c8 <UART_SetConfig+0x2ec>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042c6:	d017      	beq.n	80042f8 <UART_SetConfig+0x21c>
 80042c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042cc:	d817      	bhi.n	80042fe <UART_SetConfig+0x222>
 80042ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d2:	d00b      	beq.n	80042ec <UART_SetConfig+0x210>
 80042d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d8:	d811      	bhi.n	80042fe <UART_SetConfig+0x222>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <UART_SetConfig+0x20a>
 80042de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e2:	d006      	beq.n	80042f2 <UART_SetConfig+0x216>
 80042e4:	e00b      	b.n	80042fe <UART_SetConfig+0x222>
 80042e6:	2300      	movs	r3, #0
 80042e8:	76fb      	strb	r3, [r7, #27]
 80042ea:	e038      	b.n	800435e <UART_SetConfig+0x282>
 80042ec:	2302      	movs	r3, #2
 80042ee:	76fb      	strb	r3, [r7, #27]
 80042f0:	e035      	b.n	800435e <UART_SetConfig+0x282>
 80042f2:	2304      	movs	r3, #4
 80042f4:	76fb      	strb	r3, [r7, #27]
 80042f6:	e032      	b.n	800435e <UART_SetConfig+0x282>
 80042f8:	2308      	movs	r3, #8
 80042fa:	76fb      	strb	r3, [r7, #27]
 80042fc:	e02f      	b.n	800435e <UART_SetConfig+0x282>
 80042fe:	2310      	movs	r3, #16
 8004300:	76fb      	strb	r3, [r7, #27]
 8004302:	e02c      	b.n	800435e <UART_SetConfig+0x282>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a2d      	ldr	r2, [pc, #180]	; (80043c0 <UART_SetConfig+0x2e4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d125      	bne.n	800435a <UART_SetConfig+0x27e>
 800430e:	4b2e      	ldr	r3, [pc, #184]	; (80043c8 <UART_SetConfig+0x2ec>)
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004314:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004318:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800431c:	d017      	beq.n	800434e <UART_SetConfig+0x272>
 800431e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004322:	d817      	bhi.n	8004354 <UART_SetConfig+0x278>
 8004324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004328:	d00b      	beq.n	8004342 <UART_SetConfig+0x266>
 800432a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432e:	d811      	bhi.n	8004354 <UART_SetConfig+0x278>
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <UART_SetConfig+0x260>
 8004334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004338:	d006      	beq.n	8004348 <UART_SetConfig+0x26c>
 800433a:	e00b      	b.n	8004354 <UART_SetConfig+0x278>
 800433c:	2300      	movs	r3, #0
 800433e:	76fb      	strb	r3, [r7, #27]
 8004340:	e00d      	b.n	800435e <UART_SetConfig+0x282>
 8004342:	2302      	movs	r3, #2
 8004344:	76fb      	strb	r3, [r7, #27]
 8004346:	e00a      	b.n	800435e <UART_SetConfig+0x282>
 8004348:	2304      	movs	r3, #4
 800434a:	76fb      	strb	r3, [r7, #27]
 800434c:	e007      	b.n	800435e <UART_SetConfig+0x282>
 800434e:	2308      	movs	r3, #8
 8004350:	76fb      	strb	r3, [r7, #27]
 8004352:	e004      	b.n	800435e <UART_SetConfig+0x282>
 8004354:	2310      	movs	r3, #16
 8004356:	76fb      	strb	r3, [r7, #27]
 8004358:	e001      	b.n	800435e <UART_SetConfig+0x282>
 800435a:	2310      	movs	r3, #16
 800435c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <UART_SetConfig+0x2e4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	f040 8087 	bne.w	8004478 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800436a:	7efb      	ldrb	r3, [r7, #27]
 800436c:	2b08      	cmp	r3, #8
 800436e:	d837      	bhi.n	80043e0 <UART_SetConfig+0x304>
 8004370:	a201      	add	r2, pc, #4	; (adr r2, 8004378 <UART_SetConfig+0x29c>)
 8004372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004376:	bf00      	nop
 8004378:	0800439d 	.word	0x0800439d
 800437c:	080043e1 	.word	0x080043e1
 8004380:	080043a5 	.word	0x080043a5
 8004384:	080043e1 	.word	0x080043e1
 8004388:	080043ab 	.word	0x080043ab
 800438c:	080043e1 	.word	0x080043e1
 8004390:	080043e1 	.word	0x080043e1
 8004394:	080043e1 	.word	0x080043e1
 8004398:	080043b3 	.word	0x080043b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800439c:	f7fe fd52 	bl	8002e44 <HAL_RCC_GetPCLK1Freq>
 80043a0:	6178      	str	r0, [r7, #20]
        break;
 80043a2:	e022      	b.n	80043ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043a4:	4b0d      	ldr	r3, [pc, #52]	; (80043dc <UART_SetConfig+0x300>)
 80043a6:	617b      	str	r3, [r7, #20]
        break;
 80043a8:	e01f      	b.n	80043ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043aa:	f7fe fcb3 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 80043ae:	6178      	str	r0, [r7, #20]
        break;
 80043b0:	e01b      	b.n	80043ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b6:	617b      	str	r3, [r7, #20]
        break;
 80043b8:	e017      	b.n	80043ea <UART_SetConfig+0x30e>
 80043ba:	bf00      	nop
 80043bc:	efff69f3 	.word	0xefff69f3
 80043c0:	40008000 	.word	0x40008000
 80043c4:	40013800 	.word	0x40013800
 80043c8:	40021000 	.word	0x40021000
 80043cc:	40004400 	.word	0x40004400
 80043d0:	40004800 	.word	0x40004800
 80043d4:	40004c00 	.word	0x40004c00
 80043d8:	40005000 	.word	0x40005000
 80043dc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	76bb      	strb	r3, [r7, #26]
        break;
 80043e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 80f1 	beq.w	80045d4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d305      	bcc.n	800440e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	429a      	cmp	r2, r3
 800440c:	d902      	bls.n	8004414 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	76bb      	strb	r3, [r7, #26]
 8004412:	e0df      	b.n	80045d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	4618      	mov	r0, r3
 8004418:	f04f 0100 	mov.w	r1, #0
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	020b      	lsls	r3, r1, #8
 8004426:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800442a:	0202      	lsls	r2, r0, #8
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	6849      	ldr	r1, [r1, #4]
 8004430:	0849      	lsrs	r1, r1, #1
 8004432:	4608      	mov	r0, r1
 8004434:	f04f 0100 	mov.w	r1, #0
 8004438:	1814      	adds	r4, r2, r0
 800443a:	eb43 0501 	adc.w	r5, r3, r1
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	461a      	mov	r2, r3
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	4620      	mov	r0, r4
 800444a:	4629      	mov	r1, r5
 800444c:	f7fb fec0 	bl	80001d0 <__aeabi_uldivmod>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4613      	mov	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800445e:	d308      	bcc.n	8004472 <UART_SetConfig+0x396>
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004466:	d204      	bcs.n	8004472 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	60da      	str	r2, [r3, #12]
 8004470:	e0b0      	b.n	80045d4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	76bb      	strb	r3, [r7, #26]
 8004476:	e0ad      	b.n	80045d4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004480:	d15c      	bne.n	800453c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004482:	7efb      	ldrb	r3, [r7, #27]
 8004484:	2b08      	cmp	r3, #8
 8004486:	d828      	bhi.n	80044da <UART_SetConfig+0x3fe>
 8004488:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <UART_SetConfig+0x3b4>)
 800448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448e:	bf00      	nop
 8004490:	080044b5 	.word	0x080044b5
 8004494:	080044bd 	.word	0x080044bd
 8004498:	080044c5 	.word	0x080044c5
 800449c:	080044db 	.word	0x080044db
 80044a0:	080044cb 	.word	0x080044cb
 80044a4:	080044db 	.word	0x080044db
 80044a8:	080044db 	.word	0x080044db
 80044ac:	080044db 	.word	0x080044db
 80044b0:	080044d3 	.word	0x080044d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044b4:	f7fe fcc6 	bl	8002e44 <HAL_RCC_GetPCLK1Freq>
 80044b8:	6178      	str	r0, [r7, #20]
        break;
 80044ba:	e013      	b.n	80044e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044bc:	f7fe fcd8 	bl	8002e70 <HAL_RCC_GetPCLK2Freq>
 80044c0:	6178      	str	r0, [r7, #20]
        break;
 80044c2:	e00f      	b.n	80044e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c4:	4b49      	ldr	r3, [pc, #292]	; (80045ec <UART_SetConfig+0x510>)
 80044c6:	617b      	str	r3, [r7, #20]
        break;
 80044c8:	e00c      	b.n	80044e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ca:	f7fe fc23 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 80044ce:	6178      	str	r0, [r7, #20]
        break;
 80044d0:	e008      	b.n	80044e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d6:	617b      	str	r3, [r7, #20]
        break;
 80044d8:	e004      	b.n	80044e4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	76bb      	strb	r3, [r7, #26]
        break;
 80044e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d074      	beq.n	80045d4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	005a      	lsls	r2, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	441a      	add	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fe:	b29b      	uxth	r3, r3
 8004500:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b0f      	cmp	r3, #15
 8004506:	d916      	bls.n	8004536 <UART_SetConfig+0x45a>
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450e:	d212      	bcs.n	8004536 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	b29b      	uxth	r3, r3
 8004514:	f023 030f 	bic.w	r3, r3, #15
 8004518:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	b29b      	uxth	r3, r3
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	b29a      	uxth	r2, r3
 8004526:	89fb      	ldrh	r3, [r7, #14]
 8004528:	4313      	orrs	r3, r2
 800452a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	89fa      	ldrh	r2, [r7, #14]
 8004532:	60da      	str	r2, [r3, #12]
 8004534:	e04e      	b.n	80045d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	76bb      	strb	r3, [r7, #26]
 800453a:	e04b      	b.n	80045d4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800453c:	7efb      	ldrb	r3, [r7, #27]
 800453e:	2b08      	cmp	r3, #8
 8004540:	d827      	bhi.n	8004592 <UART_SetConfig+0x4b6>
 8004542:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <UART_SetConfig+0x46c>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	0800456d 	.word	0x0800456d
 800454c:	08004575 	.word	0x08004575
 8004550:	0800457d 	.word	0x0800457d
 8004554:	08004593 	.word	0x08004593
 8004558:	08004583 	.word	0x08004583
 800455c:	08004593 	.word	0x08004593
 8004560:	08004593 	.word	0x08004593
 8004564:	08004593 	.word	0x08004593
 8004568:	0800458b 	.word	0x0800458b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800456c:	f7fe fc6a 	bl	8002e44 <HAL_RCC_GetPCLK1Freq>
 8004570:	6178      	str	r0, [r7, #20]
        break;
 8004572:	e013      	b.n	800459c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004574:	f7fe fc7c 	bl	8002e70 <HAL_RCC_GetPCLK2Freq>
 8004578:	6178      	str	r0, [r7, #20]
        break;
 800457a:	e00f      	b.n	800459c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800457c:	4b1b      	ldr	r3, [pc, #108]	; (80045ec <UART_SetConfig+0x510>)
 800457e:	617b      	str	r3, [r7, #20]
        break;
 8004580:	e00c      	b.n	800459c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004582:	f7fe fbc7 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8004586:	6178      	str	r0, [r7, #20]
        break;
 8004588:	e008      	b.n	800459c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800458e:	617b      	str	r3, [r7, #20]
        break;
 8004590:	e004      	b.n	800459c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	76bb      	strb	r3, [r7, #26]
        break;
 800459a:	bf00      	nop
    }

    if (pclk != 0U)
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d018      	beq.n	80045d4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	085a      	lsrs	r2, r3, #1
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	441a      	add	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b0f      	cmp	r3, #15
 80045bc:	d908      	bls.n	80045d0 <UART_SetConfig+0x4f4>
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c4:	d204      	bcs.n	80045d0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	60da      	str	r2, [r3, #12]
 80045ce:	e001      	b.n	80045d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80045e0:	7ebb      	ldrb	r3, [r7, #26]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3720      	adds	r7, #32
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bdb0      	pop	{r4, r5, r7, pc}
 80045ea:	bf00      	nop
 80045ec:	00f42400 	.word	0x00f42400

080045f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01a      	beq.n	8004706 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ee:	d10a      	bne.n	8004706 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	605a      	str	r2, [r3, #4]
  }
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af02      	add	r7, sp, #8
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004744:	f7fc fe52 	bl	80013ec <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b08      	cmp	r3, #8
 8004756:	d10e      	bne.n	8004776 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f82d 	bl	80047c6 <UART_WaitOnFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e023      	b.n	80047be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b04      	cmp	r3, #4
 8004782:	d10e      	bne.n	80047a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f817 	bl	80047c6 <UART_WaitOnFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e00d      	b.n	80047be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	4613      	mov	r3, r2
 80047d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d6:	e05e      	b.n	8004896 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047de:	d05a      	beq.n	8004896 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e0:	f7fc fe04 	bl	80013ec <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d302      	bcc.n	80047f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11b      	bne.n	800482e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004804:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0201 	bic.w	r2, r2, #1
 8004814:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e043      	b.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d02c      	beq.n	8004896 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800484a:	d124      	bne.n	8004896 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004854:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004864:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0201 	bic.w	r2, r2, #1
 8004874:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e00f      	b.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4013      	ands	r3, r2
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	bf0c      	ite	eq
 80048a6:	2301      	moveq	r3, #1
 80048a8:	2300      	movne	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d091      	beq.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048be:	b084      	sub	sp, #16
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	f107 001c 	add.w	r0, r7, #28
 80048cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fa23 	bl	8004d28 <USB_CoreReset>
 80048e2:	4603      	mov	r3, r0
 80048e4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80048e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d106      	bne.n	80048fa <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	639a      	str	r2, [r3, #56]	; 0x38
 80048f8:	e005      	b.n	8004906 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004912:	b004      	add	sp, #16
 8004914:	4770      	bx	lr

08004916 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f023 0201 	bic.w	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d106      	bne.n	8004964 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	e00b      	b.n	800497c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60da      	str	r2, [r3, #12]
 8004976:	e001      	b.n	800497c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e003      	b.n	8004984 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800497c:	2032      	movs	r0, #50	; 0x32
 800497e:	f7fc fd41 	bl	8001404 <HAL_Delay>

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800498c:	b084      	sub	sp, #16
 800498e:	b580      	push	{r7, lr}
 8004990:	b086      	sub	sp, #24
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800499a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	e009      	b.n	80049c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	3340      	adds	r3, #64	; 0x40
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	2200      	movs	r2, #0
 80049b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	3301      	adds	r3, #1
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	2b0e      	cmp	r3, #14
 80049c4:	d9f2      	bls.n	80049ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d11c      	bne.n	8004a06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049da:	f043 0302 	orr.w	r3, r3, #2
 80049de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	e005      	b.n	8004a12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a24:	4619      	mov	r1, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	680b      	ldr	r3, [r1, #0]
 8004a30:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a32:	2103      	movs	r1, #3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f93d 	bl	8004cb4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a3a:	2110      	movs	r1, #16
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f8f1 	bl	8004c24 <USB_FlushTxFifo>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f90f 	bl	8004c70 <USB_FlushRxFifo>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a62:	461a      	mov	r2, r3
 8004a64:	2300      	movs	r3, #0
 8004a66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2300      	movs	r3, #0
 8004a72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a80:	2300      	movs	r3, #0
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	e043      	b.n	8004b0e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a9c:	d118      	bne.n	8004ad0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	e013      	b.n	8004ae2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e008      	b.n	8004ae2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004adc:	461a      	mov	r2, r3
 8004ade:	2300      	movs	r3, #0
 8004ae0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aee:	461a      	mov	r2, r3
 8004af0:	2300      	movs	r3, #0
 8004af2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b00:	461a      	mov	r2, r3
 8004b02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d3b7      	bcc.n	8004a86 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b16:	2300      	movs	r3, #0
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	e043      	b.n	8004ba4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b32:	d118      	bne.n	8004b66 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b46:	461a      	mov	r2, r3
 8004b48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e013      	b.n	8004b78 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	e008      	b.n	8004b78 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b72:	461a      	mov	r2, r3
 8004b74:	2300      	movs	r3, #0
 8004b76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b84:	461a      	mov	r2, r3
 8004b86:	2300      	movs	r3, #0
 8004b88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	461a      	mov	r2, r3
 8004b98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d3b7      	bcc.n	8004b1c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004bcc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	f043 0210 	orr.w	r2, r3, #16
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <USB_DevInit+0x294>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	f043 0208 	orr.w	r2, r3, #8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d107      	bne.n	8004c0e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c06:	f043 0304 	orr.w	r3, r3, #4
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c1a:	b004      	add	sp, #16
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	803c3800 	.word	0x803c3800

08004c24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	019b      	lsls	r3, r3, #6
 8004c36:	f043 0220 	orr.w	r2, r3, #32
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3301      	adds	r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <USB_FlushTxFifo+0x48>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d901      	bls.n	8004c50 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e006      	b.n	8004c5e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	d0f0      	beq.n	8004c3e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	00030d40 	.word	0x00030d40

08004c70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2210      	movs	r2, #16
 8004c80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3301      	adds	r3, #1
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a09      	ldr	r2, [pc, #36]	; (8004cb0 <USB_FlushRxFifo+0x40>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d901      	bls.n	8004c94 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e006      	b.n	8004ca2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d0f0      	beq.n	8004c82 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	00030d40 	.word	0x00030d40

08004cb4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	68f9      	ldr	r1, [r7, #12]
 8004cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b085      	sub	sp, #20
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d00:	f023 0303 	bic.w	r3, r3, #3
 8004d04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d14:	f043 0302 	orr.w	r3, r3, #2
 8004d18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3301      	adds	r3, #1
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4a13      	ldr	r2, [pc, #76]	; (8004d8c <USB_CoreReset+0x64>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d901      	bls.n	8004d46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e01b      	b.n	8004d7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	daf2      	bge.n	8004d34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f043 0201 	orr.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3301      	adds	r3, #1
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4a09      	ldr	r2, [pc, #36]	; (8004d8c <USB_CoreReset+0x64>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d901      	bls.n	8004d70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e006      	b.n	8004d7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d0f0      	beq.n	8004d5e <USB_CoreReset+0x36>

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	00030d40 	.word	0x00030d40

08004d90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	4603      	mov	r3, r0
 8004d98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004da2:	2b84      	cmp	r3, #132	; 0x84
 8004da4:	d005      	beq.n	8004db2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004da6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4413      	add	r3, r2
 8004dae:	3303      	adds	r3, #3
 8004db0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004db2:	68fb      	ldr	r3, [r7, #12]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004dc4:	f000 fade 	bl	8005384 <vTaskStartScheduler>
  
  return osOK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004dce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dd0:	b089      	sub	sp, #36	; 0x24
 8004dd2:	af04      	add	r7, sp, #16
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d020      	beq.n	8004e22 <osThreadCreate+0x54>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01c      	beq.n	8004e22 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685c      	ldr	r4, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681d      	ldr	r5, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691e      	ldr	r6, [r3, #16]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff ffc8 	bl	8004d90 <makeFreeRtosPriority>
 8004e00:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e0a:	9202      	str	r2, [sp, #8]
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	9100      	str	r1, [sp, #0]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	4632      	mov	r2, r6
 8004e14:	4629      	mov	r1, r5
 8004e16:	4620      	mov	r0, r4
 8004e18:	f000 f8ed 	bl	8004ff6 <xTaskCreateStatic>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	e01c      	b.n	8004e5c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685c      	ldr	r4, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e2e:	b29e      	uxth	r6, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff ffaa 	bl	8004d90 <makeFreeRtosPriority>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	f107 030c 	add.w	r3, r7, #12
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	9200      	str	r2, [sp, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	4632      	mov	r2, r6
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f000 f92f 	bl	80050b0 <xTaskCreate>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d001      	beq.n	8004e5c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	e000      	b.n	8004e5e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e66 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <osDelay+0x16>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	e000      	b.n	8004e7e <osDelay+0x18>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fa4c 	bl	800531c <vTaskDelay>
  
  return osOK;
 8004e84:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f103 0208 	add.w	r2, r3, #8
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f103 0208 	add.w	r2, r3, #8
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f103 0208 	add.w	r2, r3, #8
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	601a      	str	r2, [r3, #0]
}
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f46:	d103      	bne.n	8004f50 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	e00c      	b.n	8004f6a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3308      	adds	r3, #8
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	e002      	b.n	8004f5e <vListInsert+0x2e>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d2f6      	bcs.n	8004f58 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	601a      	str	r2, [r3, #0]
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b085      	sub	sp, #20
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6892      	ldr	r2, [r2, #8]
 8004fb8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6852      	ldr	r2, [r2, #4]
 8004fc2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d103      	bne.n	8004fd6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	1e5a      	subs	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b08e      	sub	sp, #56	; 0x38
 8004ffa:	af04      	add	r7, sp, #16
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10a      	bne.n	8005020 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800500a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800501c:	bf00      	nop
 800501e:	e7fe      	b.n	800501e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <xTaskCreateStatic+0x46>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	61fb      	str	r3, [r7, #28]
}
 8005038:	bf00      	nop
 800503a:	e7fe      	b.n	800503a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800503c:	2354      	movs	r3, #84	; 0x54
 800503e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	2b54      	cmp	r3, #84	; 0x54
 8005044:	d00a      	beq.n	800505c <xTaskCreateStatic+0x66>
	__asm volatile
 8005046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	61bb      	str	r3, [r7, #24]
}
 8005058:	bf00      	nop
 800505a:	e7fe      	b.n	800505a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800505c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01e      	beq.n	80050a2 <xTaskCreateStatic+0xac>
 8005064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005066:	2b00      	cmp	r3, #0
 8005068:	d01b      	beq.n	80050a2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005072:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	2202      	movs	r2, #2
 8005078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800507c:	2300      	movs	r3, #0
 800507e:	9303      	str	r3, [sp, #12]
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	9302      	str	r3, [sp, #8]
 8005084:	f107 0314 	add.w	r3, r7, #20
 8005088:	9301      	str	r3, [sp, #4]
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f850 	bl	800513a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800509a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800509c:	f000 f8d4 	bl	8005248 <prvAddNewTaskToReadyList>
 80050a0:	e001      	b.n	80050a6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050a6:	697b      	ldr	r3, [r7, #20]
	}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3728      	adds	r7, #40	; 0x28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08c      	sub	sp, #48	; 0x30
 80050b4:	af04      	add	r7, sp, #16
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	4613      	mov	r3, r2
 80050be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fec7 	bl	8005e58 <pvPortMalloc>
 80050ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00e      	beq.n	80050f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050d2:	2054      	movs	r0, #84	; 0x54
 80050d4:	f000 fec0 	bl	8005e58 <pvPortMalloc>
 80050d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
 80050e6:	e005      	b.n	80050f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050e8:	6978      	ldr	r0, [r7, #20]
 80050ea:	f000 ff81 	bl	8005ff0 <vPortFree>
 80050ee:	e001      	b.n	80050f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050f0:	2300      	movs	r3, #0
 80050f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d017      	beq.n	800512a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005102:	88fa      	ldrh	r2, [r7, #6]
 8005104:	2300      	movs	r3, #0
 8005106:	9303      	str	r3, [sp, #12]
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	9302      	str	r3, [sp, #8]
 800510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 f80e 	bl	800513a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800511e:	69f8      	ldr	r0, [r7, #28]
 8005120:	f000 f892 	bl	8005248 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005124:	2301      	movs	r3, #1
 8005126:	61bb      	str	r3, [r7, #24]
 8005128:	e002      	b.n	8005130 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800512a:	f04f 33ff 	mov.w	r3, #4294967295
 800512e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005130:	69bb      	ldr	r3, [r7, #24]
	}
 8005132:	4618      	mov	r0, r3
 8005134:	3720      	adds	r7, #32
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b088      	sub	sp, #32
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	607a      	str	r2, [r7, #4]
 8005146:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005152:	3b01      	subs	r3, #1
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	f023 0307 	bic.w	r3, r3, #7
 8005160:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <prvInitialiseNewTask+0x48>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	617b      	str	r3, [r7, #20]
}
 800517e:	bf00      	nop
 8005180:	e7fe      	b.n	8005180 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01f      	beq.n	80051c8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005188:	2300      	movs	r3, #0
 800518a:	61fb      	str	r3, [r7, #28]
 800518c:	e012      	b.n	80051b4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	4413      	add	r3, r2
 8005194:	7819      	ldrb	r1, [r3, #0]
 8005196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	4413      	add	r3, r2
 800519c:	3334      	adds	r3, #52	; 0x34
 800519e:	460a      	mov	r2, r1
 80051a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	4413      	add	r3, r2
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d006      	beq.n	80051bc <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	3301      	adds	r3, #1
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	2b0f      	cmp	r3, #15
 80051b8:	d9e9      	bls.n	800518e <prvInitialiseNewTask+0x54>
 80051ba:	e000      	b.n	80051be <prvInitialiseNewTask+0x84>
			{
				break;
 80051bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051c6:	e003      	b.n	80051d0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	2b06      	cmp	r3, #6
 80051d4:	d901      	bls.n	80051da <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051d6:	2306      	movs	r3, #6
 80051d8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	2200      	movs	r2, #0
 80051ea:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	3304      	adds	r3, #4
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff fe6c 	bl	8004ece <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	3318      	adds	r3, #24
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff fe67 	bl	8004ece <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005204:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	f1c3 0207 	rsb	r2, r3, #7
 800520c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005214:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	2200      	movs	r2, #0
 800521a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	68f9      	ldr	r1, [r7, #12]
 8005228:	69b8      	ldr	r0, [r7, #24]
 800522a:	f000 fc05 	bl	8005a38 <pxPortInitialiseStack>
 800522e:	4602      	mov	r2, r0
 8005230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005232:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800523a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800523e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005240:	bf00      	nop
 8005242:	3720      	adds	r7, #32
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005250:	f000 fd20 	bl	8005c94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005254:	4b2a      	ldr	r3, [pc, #168]	; (8005300 <prvAddNewTaskToReadyList+0xb8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3301      	adds	r3, #1
 800525a:	4a29      	ldr	r2, [pc, #164]	; (8005300 <prvAddNewTaskToReadyList+0xb8>)
 800525c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800525e:	4b29      	ldr	r3, [pc, #164]	; (8005304 <prvAddNewTaskToReadyList+0xbc>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005266:	4a27      	ldr	r2, [pc, #156]	; (8005304 <prvAddNewTaskToReadyList+0xbc>)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800526c:	4b24      	ldr	r3, [pc, #144]	; (8005300 <prvAddNewTaskToReadyList+0xb8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d110      	bne.n	8005296 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005274:	f000 fabc 	bl	80057f0 <prvInitialiseTaskLists>
 8005278:	e00d      	b.n	8005296 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800527a:	4b23      	ldr	r3, [pc, #140]	; (8005308 <prvAddNewTaskToReadyList+0xc0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d109      	bne.n	8005296 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005282:	4b20      	ldr	r3, [pc, #128]	; (8005304 <prvAddNewTaskToReadyList+0xbc>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	429a      	cmp	r2, r3
 800528e:	d802      	bhi.n	8005296 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005290:	4a1c      	ldr	r2, [pc, #112]	; (8005304 <prvAddNewTaskToReadyList+0xbc>)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005296:	4b1d      	ldr	r3, [pc, #116]	; (800530c <prvAddNewTaskToReadyList+0xc4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3301      	adds	r3, #1
 800529c:	4a1b      	ldr	r2, [pc, #108]	; (800530c <prvAddNewTaskToReadyList+0xc4>)
 800529e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	2201      	movs	r2, #1
 80052a6:	409a      	lsls	r2, r3
 80052a8:	4b19      	ldr	r3, [pc, #100]	; (8005310 <prvAddNewTaskToReadyList+0xc8>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	4a18      	ldr	r2, [pc, #96]	; (8005310 <prvAddNewTaskToReadyList+0xc8>)
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4a15      	ldr	r2, [pc, #84]	; (8005314 <prvAddNewTaskToReadyList+0xcc>)
 80052c0:	441a      	add	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3304      	adds	r3, #4
 80052c6:	4619      	mov	r1, r3
 80052c8:	4610      	mov	r0, r2
 80052ca:	f7ff fe0d 	bl	8004ee8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052ce:	f000 fd11 	bl	8005cf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052d2:	4b0d      	ldr	r3, [pc, #52]	; (8005308 <prvAddNewTaskToReadyList+0xc0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00e      	beq.n	80052f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052da:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <prvAddNewTaskToReadyList+0xbc>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d207      	bcs.n	80052f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <prvAddNewTaskToReadyList+0xd0>)
 80052ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052f8:	bf00      	nop
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	200003a8 	.word	0x200003a8
 8005304:	200002a8 	.word	0x200002a8
 8005308:	200003b4 	.word	0x200003b4
 800530c:	200003c4 	.word	0x200003c4
 8005310:	200003b0 	.word	0x200003b0
 8005314:	200002ac 	.word	0x200002ac
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005324:	2300      	movs	r3, #0
 8005326:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d017      	beq.n	800535e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800532e:	4b13      	ldr	r3, [pc, #76]	; (800537c <vTaskDelay+0x60>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <vTaskDelay+0x30>
	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	60bb      	str	r3, [r7, #8]
}
 8005348:	bf00      	nop
 800534a:	e7fe      	b.n	800534a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800534c:	f000 f87a 	bl	8005444 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005350:	2100      	movs	r1, #0
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fb0a 	bl	800596c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005358:	f000 f882 	bl	8005460 <xTaskResumeAll>
 800535c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d107      	bne.n	8005374 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005364:	4b06      	ldr	r3, [pc, #24]	; (8005380 <vTaskDelay+0x64>)
 8005366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	200003d0 	.word	0x200003d0
 8005380:	e000ed04 	.word	0xe000ed04

08005384 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800538a:	2300      	movs	r3, #0
 800538c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800538e:	2300      	movs	r3, #0
 8005390:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005392:	463a      	mov	r2, r7
 8005394:	1d39      	adds	r1, r7, #4
 8005396:	f107 0308 	add.w	r3, r7, #8
 800539a:	4618      	mov	r0, r3
 800539c:	f7fb f894 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053a0:	6839      	ldr	r1, [r7, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	9202      	str	r2, [sp, #8]
 80053a8:	9301      	str	r3, [sp, #4]
 80053aa:	2300      	movs	r3, #0
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	2300      	movs	r3, #0
 80053b0:	460a      	mov	r2, r1
 80053b2:	491e      	ldr	r1, [pc, #120]	; (800542c <vTaskStartScheduler+0xa8>)
 80053b4:	481e      	ldr	r0, [pc, #120]	; (8005430 <vTaskStartScheduler+0xac>)
 80053b6:	f7ff fe1e 	bl	8004ff6 <xTaskCreateStatic>
 80053ba:	4603      	mov	r3, r0
 80053bc:	4a1d      	ldr	r2, [pc, #116]	; (8005434 <vTaskStartScheduler+0xb0>)
 80053be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053c0:	4b1c      	ldr	r3, [pc, #112]	; (8005434 <vTaskStartScheduler+0xb0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053c8:	2301      	movs	r3, #1
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	e001      	b.n	80053d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d116      	bne.n	8005406 <vTaskStartScheduler+0x82>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	613b      	str	r3, [r7, #16]
}
 80053ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053ec:	4b12      	ldr	r3, [pc, #72]	; (8005438 <vTaskStartScheduler+0xb4>)
 80053ee:	f04f 32ff 	mov.w	r2, #4294967295
 80053f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053f4:	4b11      	ldr	r3, [pc, #68]	; (800543c <vTaskStartScheduler+0xb8>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053fa:	4b11      	ldr	r3, [pc, #68]	; (8005440 <vTaskStartScheduler+0xbc>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005400:	f000 fba6 	bl	8005b50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005404:	e00e      	b.n	8005424 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540c:	d10a      	bne.n	8005424 <vTaskStartScheduler+0xa0>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	60fb      	str	r3, [r7, #12]
}
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <vTaskStartScheduler+0x9e>
}
 8005424:	bf00      	nop
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	080062ec 	.word	0x080062ec
 8005430:	080057c1 	.word	0x080057c1
 8005434:	200003cc 	.word	0x200003cc
 8005438:	200003c8 	.word	0x200003c8
 800543c:	200003b4 	.word	0x200003b4
 8005440:	200003ac 	.word	0x200003ac

08005444 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005448:	4b04      	ldr	r3, [pc, #16]	; (800545c <vTaskSuspendAll+0x18>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3301      	adds	r3, #1
 800544e:	4a03      	ldr	r2, [pc, #12]	; (800545c <vTaskSuspendAll+0x18>)
 8005450:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005452:	bf00      	nop
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	200003d0 	.word	0x200003d0

08005460 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800546a:	2300      	movs	r3, #0
 800546c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800546e:	4b41      	ldr	r3, [pc, #260]	; (8005574 <xTaskResumeAll+0x114>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10a      	bne.n	800548c <xTaskResumeAll+0x2c>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	603b      	str	r3, [r7, #0]
}
 8005488:	bf00      	nop
 800548a:	e7fe      	b.n	800548a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800548c:	f000 fc02 	bl	8005c94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005490:	4b38      	ldr	r3, [pc, #224]	; (8005574 <xTaskResumeAll+0x114>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3b01      	subs	r3, #1
 8005496:	4a37      	ldr	r2, [pc, #220]	; (8005574 <xTaskResumeAll+0x114>)
 8005498:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800549a:	4b36      	ldr	r3, [pc, #216]	; (8005574 <xTaskResumeAll+0x114>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d161      	bne.n	8005566 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054a2:	4b35      	ldr	r3, [pc, #212]	; (8005578 <xTaskResumeAll+0x118>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d05d      	beq.n	8005566 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054aa:	e02e      	b.n	800550a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ac:	4b33      	ldr	r3, [pc, #204]	; (800557c <xTaskResumeAll+0x11c>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3318      	adds	r3, #24
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff fd72 	bl	8004fa2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff fd6d 	bl	8004fa2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	2201      	movs	r2, #1
 80054ce:	409a      	lsls	r2, r3
 80054d0:	4b2b      	ldr	r3, [pc, #172]	; (8005580 <xTaskResumeAll+0x120>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	4a2a      	ldr	r2, [pc, #168]	; (8005580 <xTaskResumeAll+0x120>)
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4a27      	ldr	r2, [pc, #156]	; (8005584 <xTaskResumeAll+0x124>)
 80054e8:	441a      	add	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3304      	adds	r3, #4
 80054ee:	4619      	mov	r1, r3
 80054f0:	4610      	mov	r0, r2
 80054f2:	f7ff fcf9 	bl	8004ee8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fa:	4b23      	ldr	r3, [pc, #140]	; (8005588 <xTaskResumeAll+0x128>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	429a      	cmp	r2, r3
 8005502:	d302      	bcc.n	800550a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005504:	4b21      	ldr	r3, [pc, #132]	; (800558c <xTaskResumeAll+0x12c>)
 8005506:	2201      	movs	r2, #1
 8005508:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800550a:	4b1c      	ldr	r3, [pc, #112]	; (800557c <xTaskResumeAll+0x11c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1cc      	bne.n	80054ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005518:	f000 fa08 	bl	800592c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800551c:	4b1c      	ldr	r3, [pc, #112]	; (8005590 <xTaskResumeAll+0x130>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d010      	beq.n	800554a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005528:	f000 f836 	bl	8005598 <xTaskIncrementTick>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005532:	4b16      	ldr	r3, [pc, #88]	; (800558c <xTaskResumeAll+0x12c>)
 8005534:	2201      	movs	r2, #1
 8005536:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3b01      	subs	r3, #1
 800553c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1f1      	bne.n	8005528 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005544:	4b12      	ldr	r3, [pc, #72]	; (8005590 <xTaskResumeAll+0x130>)
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800554a:	4b10      	ldr	r3, [pc, #64]	; (800558c <xTaskResumeAll+0x12c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d009      	beq.n	8005566 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005552:	2301      	movs	r3, #1
 8005554:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005556:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <xTaskResumeAll+0x134>)
 8005558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005566:	f000 fbc5 	bl	8005cf4 <vPortExitCritical>

	return xAlreadyYielded;
 800556a:	68bb      	ldr	r3, [r7, #8]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	200003d0 	.word	0x200003d0
 8005578:	200003a8 	.word	0x200003a8
 800557c:	20000368 	.word	0x20000368
 8005580:	200003b0 	.word	0x200003b0
 8005584:	200002ac 	.word	0x200002ac
 8005588:	200002a8 	.word	0x200002a8
 800558c:	200003bc 	.word	0x200003bc
 8005590:	200003b8 	.word	0x200003b8
 8005594:	e000ed04 	.word	0xe000ed04

08005598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800559e:	2300      	movs	r3, #0
 80055a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055a2:	4b4e      	ldr	r3, [pc, #312]	; (80056dc <xTaskIncrementTick+0x144>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f040 808e 	bne.w	80056c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055ac:	4b4c      	ldr	r3, [pc, #304]	; (80056e0 <xTaskIncrementTick+0x148>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3301      	adds	r3, #1
 80055b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055b4:	4a4a      	ldr	r2, [pc, #296]	; (80056e0 <xTaskIncrementTick+0x148>)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d120      	bne.n	8005602 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80055c0:	4b48      	ldr	r3, [pc, #288]	; (80056e4 <xTaskIncrementTick+0x14c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	603b      	str	r3, [r7, #0]
}
 80055dc:	bf00      	nop
 80055de:	e7fe      	b.n	80055de <xTaskIncrementTick+0x46>
 80055e0:	4b40      	ldr	r3, [pc, #256]	; (80056e4 <xTaskIncrementTick+0x14c>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	4b40      	ldr	r3, [pc, #256]	; (80056e8 <xTaskIncrementTick+0x150>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a3e      	ldr	r2, [pc, #248]	; (80056e4 <xTaskIncrementTick+0x14c>)
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	4a3e      	ldr	r2, [pc, #248]	; (80056e8 <xTaskIncrementTick+0x150>)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6013      	str	r3, [r2, #0]
 80055f4:	4b3d      	ldr	r3, [pc, #244]	; (80056ec <xTaskIncrementTick+0x154>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3301      	adds	r3, #1
 80055fa:	4a3c      	ldr	r2, [pc, #240]	; (80056ec <xTaskIncrementTick+0x154>)
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	f000 f995 	bl	800592c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005602:	4b3b      	ldr	r3, [pc, #236]	; (80056f0 <xTaskIncrementTick+0x158>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	429a      	cmp	r2, r3
 800560a:	d348      	bcc.n	800569e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800560c:	4b35      	ldr	r3, [pc, #212]	; (80056e4 <xTaskIncrementTick+0x14c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d104      	bne.n	8005620 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005616:	4b36      	ldr	r3, [pc, #216]	; (80056f0 <xTaskIncrementTick+0x158>)
 8005618:	f04f 32ff 	mov.w	r2, #4294967295
 800561c:	601a      	str	r2, [r3, #0]
					break;
 800561e:	e03e      	b.n	800569e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005620:	4b30      	ldr	r3, [pc, #192]	; (80056e4 <xTaskIncrementTick+0x14c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	429a      	cmp	r2, r3
 8005636:	d203      	bcs.n	8005640 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005638:	4a2d      	ldr	r2, [pc, #180]	; (80056f0 <xTaskIncrementTick+0x158>)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800563e:	e02e      	b.n	800569e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	3304      	adds	r3, #4
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff fcac 	bl	8004fa2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564e:	2b00      	cmp	r3, #0
 8005650:	d004      	beq.n	800565c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	3318      	adds	r3, #24
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff fca3 	bl	8004fa2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	2201      	movs	r2, #1
 8005662:	409a      	lsls	r2, r3
 8005664:	4b23      	ldr	r3, [pc, #140]	; (80056f4 <xTaskIncrementTick+0x15c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4313      	orrs	r3, r2
 800566a:	4a22      	ldr	r2, [pc, #136]	; (80056f4 <xTaskIncrementTick+0x15c>)
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4a1f      	ldr	r2, [pc, #124]	; (80056f8 <xTaskIncrementTick+0x160>)
 800567c:	441a      	add	r2, r3
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	3304      	adds	r3, #4
 8005682:	4619      	mov	r1, r3
 8005684:	4610      	mov	r0, r2
 8005686:	f7ff fc2f 	bl	8004ee8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568e:	4b1b      	ldr	r3, [pc, #108]	; (80056fc <xTaskIncrementTick+0x164>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	429a      	cmp	r2, r3
 8005696:	d3b9      	bcc.n	800560c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005698:	2301      	movs	r3, #1
 800569a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800569c:	e7b6      	b.n	800560c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800569e:	4b17      	ldr	r3, [pc, #92]	; (80056fc <xTaskIncrementTick+0x164>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a4:	4914      	ldr	r1, [pc, #80]	; (80056f8 <xTaskIncrementTick+0x160>)
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d901      	bls.n	80056ba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80056b6:	2301      	movs	r3, #1
 80056b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80056ba:	4b11      	ldr	r3, [pc, #68]	; (8005700 <xTaskIncrementTick+0x168>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80056c2:	2301      	movs	r3, #1
 80056c4:	617b      	str	r3, [r7, #20]
 80056c6:	e004      	b.n	80056d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80056c8:	4b0e      	ldr	r3, [pc, #56]	; (8005704 <xTaskIncrementTick+0x16c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	4a0d      	ldr	r2, [pc, #52]	; (8005704 <xTaskIncrementTick+0x16c>)
 80056d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80056d2:	697b      	ldr	r3, [r7, #20]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	200003d0 	.word	0x200003d0
 80056e0:	200003ac 	.word	0x200003ac
 80056e4:	20000360 	.word	0x20000360
 80056e8:	20000364 	.word	0x20000364
 80056ec:	200003c0 	.word	0x200003c0
 80056f0:	200003c8 	.word	0x200003c8
 80056f4:	200003b0 	.word	0x200003b0
 80056f8:	200002ac 	.word	0x200002ac
 80056fc:	200002a8 	.word	0x200002a8
 8005700:	200003bc 	.word	0x200003bc
 8005704:	200003b8 	.word	0x200003b8

08005708 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800570e:	4b27      	ldr	r3, [pc, #156]	; (80057ac <vTaskSwitchContext+0xa4>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005716:	4b26      	ldr	r3, [pc, #152]	; (80057b0 <vTaskSwitchContext+0xa8>)
 8005718:	2201      	movs	r2, #1
 800571a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800571c:	e03f      	b.n	800579e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800571e:	4b24      	ldr	r3, [pc, #144]	; (80057b0 <vTaskSwitchContext+0xa8>)
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005724:	4b23      	ldr	r3, [pc, #140]	; (80057b4 <vTaskSwitchContext+0xac>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	fab3 f383 	clz	r3, r3
 8005730:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005732:	7afb      	ldrb	r3, [r7, #11]
 8005734:	f1c3 031f 	rsb	r3, r3, #31
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	491f      	ldr	r1, [pc, #124]	; (80057b8 <vTaskSwitchContext+0xb0>)
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	440b      	add	r3, r1
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10a      	bne.n	8005764 <vTaskSwitchContext+0x5c>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	607b      	str	r3, [r7, #4]
}
 8005760:	bf00      	nop
 8005762:	e7fe      	b.n	8005762 <vTaskSwitchContext+0x5a>
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4613      	mov	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4a12      	ldr	r2, [pc, #72]	; (80057b8 <vTaskSwitchContext+0xb0>)
 8005770:	4413      	add	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	605a      	str	r2, [r3, #4]
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	3308      	adds	r3, #8
 8005786:	429a      	cmp	r2, r3
 8005788:	d104      	bne.n	8005794 <vTaskSwitchContext+0x8c>
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	605a      	str	r2, [r3, #4]
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	4a08      	ldr	r2, [pc, #32]	; (80057bc <vTaskSwitchContext+0xb4>)
 800579c:	6013      	str	r3, [r2, #0]
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	200003d0 	.word	0x200003d0
 80057b0:	200003bc 	.word	0x200003bc
 80057b4:	200003b0 	.word	0x200003b0
 80057b8:	200002ac 	.word	0x200002ac
 80057bc:	200002a8 	.word	0x200002a8

080057c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057c8:	f000 f852 	bl	8005870 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057cc:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <prvIdleTask+0x28>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d9f9      	bls.n	80057c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057d4:	4b05      	ldr	r3, [pc, #20]	; (80057ec <prvIdleTask+0x2c>)
 80057d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057e4:	e7f0      	b.n	80057c8 <prvIdleTask+0x8>
 80057e6:	bf00      	nop
 80057e8:	200002ac 	.word	0x200002ac
 80057ec:	e000ed04 	.word	0xe000ed04

080057f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057f6:	2300      	movs	r3, #0
 80057f8:	607b      	str	r3, [r7, #4]
 80057fa:	e00c      	b.n	8005816 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4a12      	ldr	r2, [pc, #72]	; (8005850 <prvInitialiseTaskLists+0x60>)
 8005808:	4413      	add	r3, r2
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff fb3f 	bl	8004e8e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3301      	adds	r3, #1
 8005814:	607b      	str	r3, [r7, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b06      	cmp	r3, #6
 800581a:	d9ef      	bls.n	80057fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800581c:	480d      	ldr	r0, [pc, #52]	; (8005854 <prvInitialiseTaskLists+0x64>)
 800581e:	f7ff fb36 	bl	8004e8e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005822:	480d      	ldr	r0, [pc, #52]	; (8005858 <prvInitialiseTaskLists+0x68>)
 8005824:	f7ff fb33 	bl	8004e8e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005828:	480c      	ldr	r0, [pc, #48]	; (800585c <prvInitialiseTaskLists+0x6c>)
 800582a:	f7ff fb30 	bl	8004e8e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800582e:	480c      	ldr	r0, [pc, #48]	; (8005860 <prvInitialiseTaskLists+0x70>)
 8005830:	f7ff fb2d 	bl	8004e8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005834:	480b      	ldr	r0, [pc, #44]	; (8005864 <prvInitialiseTaskLists+0x74>)
 8005836:	f7ff fb2a 	bl	8004e8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800583a:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <prvInitialiseTaskLists+0x78>)
 800583c:	4a05      	ldr	r2, [pc, #20]	; (8005854 <prvInitialiseTaskLists+0x64>)
 800583e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005840:	4b0a      	ldr	r3, [pc, #40]	; (800586c <prvInitialiseTaskLists+0x7c>)
 8005842:	4a05      	ldr	r2, [pc, #20]	; (8005858 <prvInitialiseTaskLists+0x68>)
 8005844:	601a      	str	r2, [r3, #0]
}
 8005846:	bf00      	nop
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	200002ac 	.word	0x200002ac
 8005854:	20000338 	.word	0x20000338
 8005858:	2000034c 	.word	0x2000034c
 800585c:	20000368 	.word	0x20000368
 8005860:	2000037c 	.word	0x2000037c
 8005864:	20000394 	.word	0x20000394
 8005868:	20000360 	.word	0x20000360
 800586c:	20000364 	.word	0x20000364

08005870 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005876:	e019      	b.n	80058ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005878:	f000 fa0c 	bl	8005c94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800587c:	4b10      	ldr	r3, [pc, #64]	; (80058c0 <prvCheckTasksWaitingTermination+0x50>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3304      	adds	r3, #4
 8005888:	4618      	mov	r0, r3
 800588a:	f7ff fb8a 	bl	8004fa2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800588e:	4b0d      	ldr	r3, [pc, #52]	; (80058c4 <prvCheckTasksWaitingTermination+0x54>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3b01      	subs	r3, #1
 8005894:	4a0b      	ldr	r2, [pc, #44]	; (80058c4 <prvCheckTasksWaitingTermination+0x54>)
 8005896:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005898:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <prvCheckTasksWaitingTermination+0x58>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3b01      	subs	r3, #1
 800589e:	4a0a      	ldr	r2, [pc, #40]	; (80058c8 <prvCheckTasksWaitingTermination+0x58>)
 80058a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058a2:	f000 fa27 	bl	8005cf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f810 	bl	80058cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <prvCheckTasksWaitingTermination+0x58>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e1      	bne.n	8005878 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	2000037c 	.word	0x2000037c
 80058c4:	200003a8 	.word	0x200003a8
 80058c8:	20000390 	.word	0x20000390

080058cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d108      	bne.n	80058f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fb84 	bl	8005ff0 <vPortFree>
				vPortFree( pxTCB );
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fb81 	bl	8005ff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058ee:	e018      	b.n	8005922 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d103      	bne.n	8005902 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fb78 	bl	8005ff0 <vPortFree>
	}
 8005900:	e00f      	b.n	8005922 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005908:	2b02      	cmp	r3, #2
 800590a:	d00a      	beq.n	8005922 <prvDeleteTCB+0x56>
	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	60fb      	str	r3, [r7, #12]
}
 800591e:	bf00      	nop
 8005920:	e7fe      	b.n	8005920 <prvDeleteTCB+0x54>
	}
 8005922:	bf00      	nop
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005932:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <prvResetNextTaskUnblockTime+0x38>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d104      	bne.n	8005946 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800593c:	4b0a      	ldr	r3, [pc, #40]	; (8005968 <prvResetNextTaskUnblockTime+0x3c>)
 800593e:	f04f 32ff 	mov.w	r2, #4294967295
 8005942:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005944:	e008      	b.n	8005958 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005946:	4b07      	ldr	r3, [pc, #28]	; (8005964 <prvResetNextTaskUnblockTime+0x38>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	4a04      	ldr	r2, [pc, #16]	; (8005968 <prvResetNextTaskUnblockTime+0x3c>)
 8005956:	6013      	str	r3, [r2, #0]
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	20000360 	.word	0x20000360
 8005968:	200003c8 	.word	0x200003c8

0800596c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005976:	4b29      	ldr	r3, [pc, #164]	; (8005a1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800597c:	4b28      	ldr	r3, [pc, #160]	; (8005a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3304      	adds	r3, #4
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff fb0d 	bl	8004fa2 <uxListRemove>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10b      	bne.n	80059a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800598e:	4b24      	ldr	r3, [pc, #144]	; (8005a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	2201      	movs	r2, #1
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	43da      	mvns	r2, r3
 800599c:	4b21      	ldr	r3, [pc, #132]	; (8005a24 <prvAddCurrentTaskToDelayedList+0xb8>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4013      	ands	r3, r2
 80059a2:	4a20      	ldr	r2, [pc, #128]	; (8005a24 <prvAddCurrentTaskToDelayedList+0xb8>)
 80059a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d10a      	bne.n	80059c4 <prvAddCurrentTaskToDelayedList+0x58>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059b4:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3304      	adds	r3, #4
 80059ba:	4619      	mov	r1, r3
 80059bc:	481a      	ldr	r0, [pc, #104]	; (8005a28 <prvAddCurrentTaskToDelayedList+0xbc>)
 80059be:	f7ff fa93 	bl	8004ee8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059c2:	e026      	b.n	8005a12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4413      	add	r3, r2
 80059ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059cc:	4b14      	ldr	r3, [pc, #80]	; (8005a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d209      	bcs.n	80059f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059dc:	4b13      	ldr	r3, [pc, #76]	; (8005a2c <prvAddCurrentTaskToDelayedList+0xc0>)
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	4b0f      	ldr	r3, [pc, #60]	; (8005a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f7ff faa1 	bl	8004f30 <vListInsert>
}
 80059ee:	e010      	b.n	8005a12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059f0:	4b0f      	ldr	r3, [pc, #60]	; (8005a30 <prvAddCurrentTaskToDelayedList+0xc4>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3304      	adds	r3, #4
 80059fa:	4619      	mov	r1, r3
 80059fc:	4610      	mov	r0, r2
 80059fe:	f7ff fa97 	bl	8004f30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a02:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d202      	bcs.n	8005a12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005a0c:	4a09      	ldr	r2, [pc, #36]	; (8005a34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	6013      	str	r3, [r2, #0]
}
 8005a12:	bf00      	nop
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	200003ac 	.word	0x200003ac
 8005a20:	200002a8 	.word	0x200002a8
 8005a24:	200003b0 	.word	0x200003b0
 8005a28:	20000394 	.word	0x20000394
 8005a2c:	20000364 	.word	0x20000364
 8005a30:	20000360 	.word	0x20000360
 8005a34:	200003c8 	.word	0x200003c8

08005a38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3b04      	subs	r3, #4
 8005a48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3b04      	subs	r3, #4
 8005a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f023 0201 	bic.w	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3b04      	subs	r3, #4
 8005a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a68:	4a0c      	ldr	r2, [pc, #48]	; (8005a9c <pxPortInitialiseStack+0x64>)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3b14      	subs	r3, #20
 8005a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	3b04      	subs	r3, #4
 8005a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f06f 0202 	mvn.w	r2, #2
 8005a86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3b20      	subs	r3, #32
 8005a8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	08005aa1 	.word	0x08005aa1

08005aa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005aaa:	4b12      	ldr	r3, [pc, #72]	; (8005af4 <prvTaskExitError+0x54>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab2:	d00a      	beq.n	8005aca <prvTaskExitError+0x2a>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	60fb      	str	r3, [r7, #12]
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <prvTaskExitError+0x28>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	60bb      	str	r3, [r7, #8]
}
 8005adc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ade:	bf00      	nop
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0fc      	beq.n	8005ae0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ae6:	bf00      	nop
 8005ae8:	bf00      	nop
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	2000000c 	.word	0x2000000c
	...

08005b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b00:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <pxCurrentTCBConst2>)
 8005b02:	6819      	ldr	r1, [r3, #0]
 8005b04:	6808      	ldr	r0, [r1, #0]
 8005b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0a:	f380 8809 	msr	PSP, r0
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f04f 0000 	mov.w	r0, #0
 8005b16:	f380 8811 	msr	BASEPRI, r0
 8005b1a:	4770      	bx	lr
 8005b1c:	f3af 8000 	nop.w

08005b20 <pxCurrentTCBConst2>:
 8005b20:	200002a8 	.word	0x200002a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop

08005b28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b28:	4808      	ldr	r0, [pc, #32]	; (8005b4c <prvPortStartFirstTask+0x24>)
 8005b2a:	6800      	ldr	r0, [r0, #0]
 8005b2c:	6800      	ldr	r0, [r0, #0]
 8005b2e:	f380 8808 	msr	MSP, r0
 8005b32:	f04f 0000 	mov.w	r0, #0
 8005b36:	f380 8814 	msr	CONTROL, r0
 8005b3a:	b662      	cpsie	i
 8005b3c:	b661      	cpsie	f
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	df00      	svc	0
 8005b48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b4a:	bf00      	nop
 8005b4c:	e000ed08 	.word	0xe000ed08

08005b50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b56:	4b46      	ldr	r3, [pc, #280]	; (8005c70 <xPortStartScheduler+0x120>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a46      	ldr	r2, [pc, #280]	; (8005c74 <xPortStartScheduler+0x124>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d10a      	bne.n	8005b76 <xPortStartScheduler+0x26>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	613b      	str	r3, [r7, #16]
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b76:	4b3e      	ldr	r3, [pc, #248]	; (8005c70 <xPortStartScheduler+0x120>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a3f      	ldr	r2, [pc, #252]	; (8005c78 <xPortStartScheduler+0x128>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d10a      	bne.n	8005b96 <xPortStartScheduler+0x46>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	60fb      	str	r3, [r7, #12]
}
 8005b92:	bf00      	nop
 8005b94:	e7fe      	b.n	8005b94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b96:	4b39      	ldr	r3, [pc, #228]	; (8005c7c <xPortStartScheduler+0x12c>)
 8005b98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	22ff      	movs	r2, #255	; 0xff
 8005ba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	4b31      	ldr	r3, [pc, #196]	; (8005c80 <xPortStartScheduler+0x130>)
 8005bbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bbe:	4b31      	ldr	r3, [pc, #196]	; (8005c84 <xPortStartScheduler+0x134>)
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bc4:	e009      	b.n	8005bda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005bc6:	4b2f      	ldr	r3, [pc, #188]	; (8005c84 <xPortStartScheduler+0x134>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	4a2d      	ldr	r2, [pc, #180]	; (8005c84 <xPortStartScheduler+0x134>)
 8005bce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bda:	78fb      	ldrb	r3, [r7, #3]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be2:	2b80      	cmp	r3, #128	; 0x80
 8005be4:	d0ef      	beq.n	8005bc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005be6:	4b27      	ldr	r3, [pc, #156]	; (8005c84 <xPortStartScheduler+0x134>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f1c3 0307 	rsb	r3, r3, #7
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d00a      	beq.n	8005c08 <xPortStartScheduler+0xb8>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	60bb      	str	r3, [r7, #8]
}
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c08:	4b1e      	ldr	r3, [pc, #120]	; (8005c84 <xPortStartScheduler+0x134>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	021b      	lsls	r3, r3, #8
 8005c0e:	4a1d      	ldr	r2, [pc, #116]	; (8005c84 <xPortStartScheduler+0x134>)
 8005c10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c12:	4b1c      	ldr	r3, [pc, #112]	; (8005c84 <xPortStartScheduler+0x134>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c1a:	4a1a      	ldr	r2, [pc, #104]	; (8005c84 <xPortStartScheduler+0x134>)
 8005c1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c26:	4b18      	ldr	r3, [pc, #96]	; (8005c88 <xPortStartScheduler+0x138>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <xPortStartScheduler+0x138>)
 8005c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c32:	4b15      	ldr	r3, [pc, #84]	; (8005c88 <xPortStartScheduler+0x138>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a14      	ldr	r2, [pc, #80]	; (8005c88 <xPortStartScheduler+0x138>)
 8005c38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c3e:	f000 f8dd 	bl	8005dfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c42:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <xPortStartScheduler+0x13c>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c48:	f000 f8fc 	bl	8005e44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c4c:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <xPortStartScheduler+0x140>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a0f      	ldr	r2, [pc, #60]	; (8005c90 <xPortStartScheduler+0x140>)
 8005c52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c58:	f7ff ff66 	bl	8005b28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c5c:	f7ff fd54 	bl	8005708 <vTaskSwitchContext>
	prvTaskExitError();
 8005c60:	f7ff ff1e 	bl	8005aa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	e000ed00 	.word	0xe000ed00
 8005c74:	410fc271 	.word	0x410fc271
 8005c78:	410fc270 	.word	0x410fc270
 8005c7c:	e000e400 	.word	0xe000e400
 8005c80:	200003d4 	.word	0x200003d4
 8005c84:	200003d8 	.word	0x200003d8
 8005c88:	e000ed20 	.word	0xe000ed20
 8005c8c:	2000000c 	.word	0x2000000c
 8005c90:	e000ef34 	.word	0xe000ef34

08005c94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	607b      	str	r3, [r7, #4]
}
 8005cac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005cae:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <vPortEnterCritical+0x58>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	4a0d      	ldr	r2, [pc, #52]	; (8005cec <vPortEnterCritical+0x58>)
 8005cb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <vPortEnterCritical+0x58>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d10f      	bne.n	8005ce0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <vPortEnterCritical+0x5c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	603b      	str	r3, [r7, #0]
}
 8005cdc:	bf00      	nop
 8005cde:	e7fe      	b.n	8005cde <vPortEnterCritical+0x4a>
	}
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	2000000c 	.word	0x2000000c
 8005cf0:	e000ed04 	.word	0xe000ed04

08005cf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cfa:	4b12      	ldr	r3, [pc, #72]	; (8005d44 <vPortExitCritical+0x50>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10a      	bne.n	8005d18 <vPortExitCritical+0x24>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	607b      	str	r3, [r7, #4]
}
 8005d14:	bf00      	nop
 8005d16:	e7fe      	b.n	8005d16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d18:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <vPortExitCritical+0x50>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	4a09      	ldr	r2, [pc, #36]	; (8005d44 <vPortExitCritical+0x50>)
 8005d20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d22:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <vPortExitCritical+0x50>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d105      	bne.n	8005d36 <vPortExitCritical+0x42>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	2000000c 	.word	0x2000000c
	...

08005d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d50:	f3ef 8009 	mrs	r0, PSP
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <pxCurrentTCBConst>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	f01e 0f10 	tst.w	lr, #16
 8005d60:	bf08      	it	eq
 8005d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6a:	6010      	str	r0, [r2, #0]
 8005d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d74:	f380 8811 	msr	BASEPRI, r0
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f7ff fcc2 	bl	8005708 <vTaskSwitchContext>
 8005d84:	f04f 0000 	mov.w	r0, #0
 8005d88:	f380 8811 	msr	BASEPRI, r0
 8005d8c:	bc09      	pop	{r0, r3}
 8005d8e:	6819      	ldr	r1, [r3, #0]
 8005d90:	6808      	ldr	r0, [r1, #0]
 8005d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d96:	f01e 0f10 	tst.w	lr, #16
 8005d9a:	bf08      	it	eq
 8005d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005da0:	f380 8809 	msr	PSP, r0
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	f3af 8000 	nop.w

08005db0 <pxCurrentTCBConst>:
 8005db0:	200002a8 	.word	0x200002a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop

08005db8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	607b      	str	r3, [r7, #4]
}
 8005dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005dd2:	f7ff fbe1 	bl	8005598 <xTaskIncrementTick>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ddc:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <SysTick_Handler+0x40>)
 8005dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	2300      	movs	r3, #0
 8005de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	f383 8811 	msr	BASEPRI, r3
}
 8005dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005df0:	bf00      	nop
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	e000ed04 	.word	0xe000ed04

08005dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e00:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <vPortSetupTimerInterrupt+0x34>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e06:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <vPortSetupTimerInterrupt+0x38>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <vPortSetupTimerInterrupt+0x3c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a0a      	ldr	r2, [pc, #40]	; (8005e3c <vPortSetupTimerInterrupt+0x40>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	099b      	lsrs	r3, r3, #6
 8005e18:	4a09      	ldr	r2, [pc, #36]	; (8005e40 <vPortSetupTimerInterrupt+0x44>)
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e1e:	4b04      	ldr	r3, [pc, #16]	; (8005e30 <vPortSetupTimerInterrupt+0x34>)
 8005e20:	2207      	movs	r2, #7
 8005e22:	601a      	str	r2, [r3, #0]
}
 8005e24:	bf00      	nop
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	e000e010 	.word	0xe000e010
 8005e34:	e000e018 	.word	0xe000e018
 8005e38:	20000000 	.word	0x20000000
 8005e3c:	10624dd3 	.word	0x10624dd3
 8005e40:	e000e014 	.word	0xe000e014

08005e44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e54 <vPortEnableVFP+0x10>
 8005e48:	6801      	ldr	r1, [r0, #0]
 8005e4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e4e:	6001      	str	r1, [r0, #0]
 8005e50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e52:	bf00      	nop
 8005e54:	e000ed88 	.word	0xe000ed88

08005e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08a      	sub	sp, #40	; 0x28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e60:	2300      	movs	r3, #0
 8005e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e64:	f7ff faee 	bl	8005444 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e68:	4b5b      	ldr	r3, [pc, #364]	; (8005fd8 <pvPortMalloc+0x180>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e70:	f000 f920 	bl	80060b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e74:	4b59      	ldr	r3, [pc, #356]	; (8005fdc <pvPortMalloc+0x184>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f040 8093 	bne.w	8005fa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01d      	beq.n	8005ec4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005e88:	2208      	movs	r2, #8
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d014      	beq.n	8005ec4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f023 0307 	bic.w	r3, r3, #7
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <pvPortMalloc+0x6c>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	617b      	str	r3, [r7, #20]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d06e      	beq.n	8005fa8 <pvPortMalloc+0x150>
 8005eca:	4b45      	ldr	r3, [pc, #276]	; (8005fe0 <pvPortMalloc+0x188>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d869      	bhi.n	8005fa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ed4:	4b43      	ldr	r3, [pc, #268]	; (8005fe4 <pvPortMalloc+0x18c>)
 8005ed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ed8:	4b42      	ldr	r3, [pc, #264]	; (8005fe4 <pvPortMalloc+0x18c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ede:	e004      	b.n	8005eea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d903      	bls.n	8005efc <pvPortMalloc+0xa4>
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1f1      	bne.n	8005ee0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005efc:	4b36      	ldr	r3, [pc, #216]	; (8005fd8 <pvPortMalloc+0x180>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d050      	beq.n	8005fa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2208      	movs	r2, #8
 8005f0c:	4413      	add	r3, r2
 8005f0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	1ad2      	subs	r2, r2, r3
 8005f20:	2308      	movs	r3, #8
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d91f      	bls.n	8005f68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <pvPortMalloc+0xf8>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	613b      	str	r3, [r7, #16]
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	1ad2      	subs	r2, r2, r3
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f62:	69b8      	ldr	r0, [r7, #24]
 8005f64:	f000 f908 	bl	8006178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f68:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <pvPortMalloc+0x188>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	4a1b      	ldr	r2, [pc, #108]	; (8005fe0 <pvPortMalloc+0x188>)
 8005f74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f76:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <pvPortMalloc+0x188>)
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	4b1b      	ldr	r3, [pc, #108]	; (8005fe8 <pvPortMalloc+0x190>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d203      	bcs.n	8005f8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f82:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <pvPortMalloc+0x188>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a18      	ldr	r2, [pc, #96]	; (8005fe8 <pvPortMalloc+0x190>)
 8005f88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	4b13      	ldr	r3, [pc, #76]	; (8005fdc <pvPortMalloc+0x184>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005f9e:	4b13      	ldr	r3, [pc, #76]	; (8005fec <pvPortMalloc+0x194>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	4a11      	ldr	r2, [pc, #68]	; (8005fec <pvPortMalloc+0x194>)
 8005fa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fa8:	f7ff fa5a 	bl	8005460 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <pvPortMalloc+0x174>
	__asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	60fb      	str	r3, [r7, #12]
}
 8005fc8:	bf00      	nop
 8005fca:	e7fe      	b.n	8005fca <pvPortMalloc+0x172>
	return pvReturn;
 8005fcc:	69fb      	ldr	r3, [r7, #28]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3728      	adds	r7, #40	; 0x28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000f9c 	.word	0x20000f9c
 8005fdc:	20000fb0 	.word	0x20000fb0
 8005fe0:	20000fa0 	.word	0x20000fa0
 8005fe4:	20000f94 	.word	0x20000f94
 8005fe8:	20000fa4 	.word	0x20000fa4
 8005fec:	20000fa8 	.word	0x20000fa8

08005ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d04d      	beq.n	800609e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006002:	2308      	movs	r3, #8
 8006004:	425b      	negs	r3, r3
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4413      	add	r3, r2
 800600a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	4b24      	ldr	r3, [pc, #144]	; (80060a8 <vPortFree+0xb8>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4013      	ands	r3, r2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <vPortFree+0x44>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	60fb      	str	r3, [r7, #12]
}
 8006030:	bf00      	nop
 8006032:	e7fe      	b.n	8006032 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <vPortFree+0x62>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	60bb      	str	r3, [r7, #8]
}
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	4b14      	ldr	r3, [pc, #80]	; (80060a8 <vPortFree+0xb8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4013      	ands	r3, r2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01e      	beq.n	800609e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d11a      	bne.n	800609e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	4b0e      	ldr	r3, [pc, #56]	; (80060a8 <vPortFree+0xb8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	43db      	mvns	r3, r3
 8006072:	401a      	ands	r2, r3
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006078:	f7ff f9e4 	bl	8005444 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	4b0a      	ldr	r3, [pc, #40]	; (80060ac <vPortFree+0xbc>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4413      	add	r3, r2
 8006086:	4a09      	ldr	r2, [pc, #36]	; (80060ac <vPortFree+0xbc>)
 8006088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800608a:	6938      	ldr	r0, [r7, #16]
 800608c:	f000 f874 	bl	8006178 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006090:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <vPortFree+0xc0>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3301      	adds	r3, #1
 8006096:	4a06      	ldr	r2, [pc, #24]	; (80060b0 <vPortFree+0xc0>)
 8006098:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800609a:	f7ff f9e1 	bl	8005460 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800609e:	bf00      	nop
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000fb0 	.word	0x20000fb0
 80060ac:	20000fa0 	.word	0x20000fa0
 80060b0:	20000fac 	.word	0x20000fac

080060b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80060be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060c0:	4b27      	ldr	r3, [pc, #156]	; (8006160 <prvHeapInit+0xac>)
 80060c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f003 0307 	and.w	r3, r3, #7
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00c      	beq.n	80060e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3307      	adds	r3, #7
 80060d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0307 	bic.w	r3, r3, #7
 80060da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	4a1f      	ldr	r2, [pc, #124]	; (8006160 <prvHeapInit+0xac>)
 80060e4:	4413      	add	r3, r2
 80060e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060ec:	4a1d      	ldr	r2, [pc, #116]	; (8006164 <prvHeapInit+0xb0>)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060f2:	4b1c      	ldr	r3, [pc, #112]	; (8006164 <prvHeapInit+0xb0>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	4413      	add	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006100:	2208      	movs	r2, #8
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	1a9b      	subs	r3, r3, r2
 8006106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0307 	bic.w	r3, r3, #7
 800610e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4a15      	ldr	r2, [pc, #84]	; (8006168 <prvHeapInit+0xb4>)
 8006114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006116:	4b14      	ldr	r3, [pc, #80]	; (8006168 <prvHeapInit+0xb4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2200      	movs	r2, #0
 800611c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800611e:	4b12      	ldr	r3, [pc, #72]	; (8006168 <prvHeapInit+0xb4>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	1ad2      	subs	r2, r2, r3
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006134:	4b0c      	ldr	r3, [pc, #48]	; (8006168 <prvHeapInit+0xb4>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	4a0a      	ldr	r2, [pc, #40]	; (800616c <prvHeapInit+0xb8>)
 8006142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	4a09      	ldr	r2, [pc, #36]	; (8006170 <prvHeapInit+0xbc>)
 800614a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800614c:	4b09      	ldr	r3, [pc, #36]	; (8006174 <prvHeapInit+0xc0>)
 800614e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006152:	601a      	str	r2, [r3, #0]
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	200003dc 	.word	0x200003dc
 8006164:	20000f94 	.word	0x20000f94
 8006168:	20000f9c 	.word	0x20000f9c
 800616c:	20000fa4 	.word	0x20000fa4
 8006170:	20000fa0 	.word	0x20000fa0
 8006174:	20000fb0 	.word	0x20000fb0

08006178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006180:	4b28      	ldr	r3, [pc, #160]	; (8006224 <prvInsertBlockIntoFreeList+0xac>)
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	e002      	b.n	800618c <prvInsertBlockIntoFreeList+0x14>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	429a      	cmp	r2, r3
 8006194:	d8f7      	bhi.n	8006186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	4413      	add	r3, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d108      	bne.n	80061ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	441a      	add	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	441a      	add	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d118      	bne.n	8006200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b15      	ldr	r3, [pc, #84]	; (8006228 <prvInsertBlockIntoFreeList+0xb0>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d00d      	beq.n	80061f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	441a      	add	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	e008      	b.n	8006208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061f6:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <prvInsertBlockIntoFreeList+0xb0>)
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	e003      	b.n	8006208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	429a      	cmp	r2, r3
 800620e:	d002      	beq.n	8006216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006216:	bf00      	nop
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	20000f94 	.word	0x20000f94
 8006228:	20000f9c 	.word	0x20000f9c

0800622c <__libc_init_array>:
 800622c:	b570      	push	{r4, r5, r6, lr}
 800622e:	4d0d      	ldr	r5, [pc, #52]	; (8006264 <__libc_init_array+0x38>)
 8006230:	4c0d      	ldr	r4, [pc, #52]	; (8006268 <__libc_init_array+0x3c>)
 8006232:	1b64      	subs	r4, r4, r5
 8006234:	10a4      	asrs	r4, r4, #2
 8006236:	2600      	movs	r6, #0
 8006238:	42a6      	cmp	r6, r4
 800623a:	d109      	bne.n	8006250 <__libc_init_array+0x24>
 800623c:	4d0b      	ldr	r5, [pc, #44]	; (800626c <__libc_init_array+0x40>)
 800623e:	4c0c      	ldr	r4, [pc, #48]	; (8006270 <__libc_init_array+0x44>)
 8006240:	f000 f820 	bl	8006284 <_init>
 8006244:	1b64      	subs	r4, r4, r5
 8006246:	10a4      	asrs	r4, r4, #2
 8006248:	2600      	movs	r6, #0
 800624a:	42a6      	cmp	r6, r4
 800624c:	d105      	bne.n	800625a <__libc_init_array+0x2e>
 800624e:	bd70      	pop	{r4, r5, r6, pc}
 8006250:	f855 3b04 	ldr.w	r3, [r5], #4
 8006254:	4798      	blx	r3
 8006256:	3601      	adds	r6, #1
 8006258:	e7ee      	b.n	8006238 <__libc_init_array+0xc>
 800625a:	f855 3b04 	ldr.w	r3, [r5], #4
 800625e:	4798      	blx	r3
 8006260:	3601      	adds	r6, #1
 8006262:	e7f2      	b.n	800624a <__libc_init_array+0x1e>
 8006264:	08006344 	.word	0x08006344
 8006268:	08006344 	.word	0x08006344
 800626c:	08006344 	.word	0x08006344
 8006270:	08006348 	.word	0x08006348

08006274 <memset>:
 8006274:	4402      	add	r2, r0
 8006276:	4603      	mov	r3, r0
 8006278:	4293      	cmp	r3, r2
 800627a:	d100      	bne.n	800627e <memset+0xa>
 800627c:	4770      	bx	lr
 800627e:	f803 1b01 	strb.w	r1, [r3], #1
 8006282:	e7f9      	b.n	8006278 <memset+0x4>

08006284 <_init>:
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	bf00      	nop
 8006288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628a:	bc08      	pop	{r3}
 800628c:	469e      	mov	lr, r3
 800628e:	4770      	bx	lr

08006290 <_fini>:
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006292:	bf00      	nop
 8006294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006296:	bc08      	pop	{r3}
 8006298:	469e      	mov	lr, r3
 800629a:	4770      	bx	lr
